<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Nymote</title>
        <description>Nymote - Nymote</description>
        <link>http://nymote.org</link>
        <link>http://nymote.org</link>
        <lastBuildDate>2015-01-22T23:25:31+00:00</lastBuildDate>
        <pubDate>2015-01-22T23:25:31+00:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Brewing MISO to serve Nymote</title>
                <description>
&lt;p&gt;The &lt;a href=&quot;http://nymote.org/blog/2013/introducing-nymote/&quot;&gt;mission of Nymote&lt;/a&gt; is to enable the creation of resilient
decentralised systems that incorporate privacy from the ground up, so that
users retain control of their networks and data.  To achieve this, we
reconsider all the old assumptions about how software is created in light of
the problems of the modern, networked environment.  Problems that will become
even more pronounced as more devices and sensors find their way into our lives.&lt;/p&gt;

&lt;p&gt;We want to make it simple for anyone to be able to run a piece of the cloud
for their own purposes and the first three applications Nymote targets are
Mail, Contacts and Calendars, but to get there, we first have to create solid
foundations.&lt;/p&gt;

&lt;h3 id=&quot;defining-the-bedrock&quot;&gt;Defining the bedrock&lt;/h3&gt;

&lt;p&gt;In order to create applications that work for the user, we first have to
create a robust and reliable software stack that takes care of fundamental
problems for us. In other words, to be able to assemble the applications we
desire, we must first construct the correct building blocks.&lt;/p&gt;

&lt;p&gt;We’ve taken a clean-slate approach so that we can build long-lasting solutions
with all the benefits of hindsight but none of the baggage. As
mentioned in earlier posts, there are three main components of the stack,
which are: &lt;a href=&quot;http://nymote.org/software/mirage/&quot;&gt;Mirage&lt;/a&gt; (OS for the Cloud/IoT), &lt;a href=&quot;http://nymote.org/software/irmin/&quot;&gt;Irmin&lt;/a&gt; (distributed datastore)
and &lt;a href=&quot;http://nymote.org/software/signpost/&quot;&gt;Signpost&lt;/a&gt; (identity and connectivity) - all built using the &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml&lt;/a&gt;
programming language.&lt;/p&gt;

&lt;h4 id=&quot;using-the-miso-stack-to-build-nymote&quot;&gt;Using the MISO stack to build Nymote&lt;/h4&gt;

&lt;p&gt;As you’ve already noticed, there’s a useful acronym for the above tools —
&lt;strong&gt;MISO&lt;/strong&gt;. Each of the projects mentioned is a serious undertaking in its own
right and each is likely to be impactful as a stand-alone concept.  However,
when used together we have the opportunity to create applications and services
with high levels of security, scalability and stability, which are not easy to
achieve using other means. &lt;/p&gt;

&lt;p&gt;In other words, MISO is the &lt;em&gt;toolstack&lt;/em&gt; that we’re using to build Nymote —
Nymote is the &lt;em&gt;decentralised system&lt;/em&gt; that works for its users.&lt;/p&gt;

&lt;p&gt;Each of the projects is at a different phase but they have all have made great
strides over the last year.&lt;/p&gt;

&lt;h4 id=&quot;mirage&quot;&gt;Mirage&lt;/h4&gt;

&lt;p&gt;Mirage — a library operating system that constructs unikernels — is the most
mature part of the stack. I previously wrote about the
&lt;a href=&quot;http://nymote.org/blog/2014/announcing-first-mirage-release/&quot;&gt;Mirage 1.0 release&lt;/a&gt; and only six months later we had an
&lt;a href=&quot;http://openmirage.org/blog/announcing-mirage-20-release&quot;&gt;impressive 2.0 release&lt;/a&gt;, with continuing advances throughout the year.
We achieved major milestones such as the ability to deploy unikernels to
ARM-based devices, as well as a clean-slate implementation of the transport
layer security (TLS) protocol.&lt;/p&gt;

&lt;p&gt;In addition to the development efforts, there have also been many
presentations to audiences, ranging from &lt;a href=&quot;http://amirchaudhry.com/describing-miso-entrepreneur-first-2014/&quot;&gt;small groups of startups&lt;/a&gt;
all the way to &lt;a href=&quot;http://media.ccc.de/browse/congress/2014/31c3_-_6443_-_en_-_saal_2_-_201412271245_-_trustworthy_secure_modular_operating_system_engineering_-_hannes_-_david_kaloper.html#video&quot;&gt;prestigious keynotes&lt;/a&gt; with 1000+ attendees.  Ever
since we’ve had ARM support, the talks themselves have been delivered from
unikernels running on Cubieboards and you can see the growing collection of
slides at &lt;a href=&quot;http://decks.openmirage.org&quot;&gt;decks.openmirage.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of these activities have led to a tremendous increase in public awareness
of unikernels and the value they can bring to developing robust, modern
software as well as the promise of &lt;a href=&quot;https://medium.com/@darrenrush/after-docker-unikernels-and-immutable-infrastructure-93d5a91c849e&quot;&gt;immutable infrastructure&lt;/a&gt;.
As more people look to get involved and contribute to the codebase, we’ve also
begun curating a set of &lt;a href=&quot;https://github.com/mirage/mirage-www/wiki/Pioneer-Projects&quot;&gt;Pioneer Projects&lt;/a&gt;, which are suitable for a
range of skill-levels.&lt;/p&gt;

&lt;p&gt;You can find much more information on all the activities of 2014 in the
comprehensive &lt;a href=&quot;http://openmirage.org/blog/2014-in-review&quot;&gt;Mirage review post&lt;/a&gt;. As it’s the most mature
component of the MISO stack, anyone interested in the &lt;em&gt;development of code&lt;/em&gt;
towards Nymote should join the &lt;a href=&quot;http://lists.xenproject.org/cgi-bin/mailman/listinfo/mirageos-devel&quot;&gt;Mirage mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Source code&lt;/em&gt; - &lt;a href=&quot;https://github.com/mirage&quot;&gt;Mirage org on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;irmin&quot;&gt;Irmin&lt;/h4&gt;

&lt;p&gt;Irmin — a library to persist and synchronize distributed data structures —
made significant progress last year. It’s based on the principles of Git, the
distributed version control system, and allows developers to choose the
appropriate combination of consistency, availability and partition tolerance
for their needs.&lt;/p&gt;

&lt;p&gt;Early last year Irmin was released as an alpha with the ability to speak
‘fluent Git’ and by the summer, it was supporting user-defined merge
operations and fast in-memory views.  A couple of summer projects improved the
&lt;a href=&quot;http://gazagnaire.org/pub/FGM15.pdf&quot;&gt;merge strategies&lt;/a&gt; and synchronisation strategies, while an
external project — Xenstore — used Irmin to &lt;a href=&quot;http://openmirage.org/blog/introducing-irmin-in-xenstore&quot;&gt;add fault-tolerance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More recent work has involved a big clean-up in the user-facing API (with nice
&lt;a href=&quot;http://samoht.github.io/irmin/&quot;&gt;developer documentation&lt;/a&gt;) and a cleaner high-level REST API.
Upcoming work includes proper documentation of the REST API, which means Irmin
can more easily be used in non-OCaml projects, and full integration with
Mirage projects. &lt;/p&gt;

&lt;p&gt;Irmin is already being used to create
&lt;a href=&quot;https://opam.ocaml.org/packages/imaplet-lwt/imaplet-lwt.0.1.3/&quot;&gt;a version controlled IMAP server&lt;/a&gt; and
&lt;a href=&quot;https://github.com/samoht/dog&quot;&gt;a version controlled distributed log system&lt;/a&gt;. It’s no surprise
that the first major release is coming &lt;a href=&quot;https://github.com/mirage/irmin/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0&quot;&gt;very soon&lt;/a&gt;!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Source code&lt;/em&gt; - &lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;signpost&quot;&gt;Signpost&lt;/h4&gt;

&lt;p&gt;Signpost will be a collection of libraries that aims to provide identity and
connectivity between devices.  Forming efficient connections between
end-points is becoming ever more important as the number of devices we own
increases. These devices need to be able to recognise and reach each-other,
regardless of their location on the network or the obstacles in between. &lt;/p&gt;

&lt;p&gt;This is very much a nascent project and it involves a lot of work on
underlying libraries to ensure that security aspects are properly considered.
As such, we must take great care in how we implement things and be clear about
any trade-offs we make. Our thoughts are beginning to converge on a design we
think will work and that we would entrust with our own data, but we’re
treating this as a case of ‘Here Be Dragons’.  This is a critical piece of the
stack and we’ll share what we learn as we chart our way towards it.&lt;/p&gt;

&lt;p&gt;Even though we’re at the design stage of Signpost, we did substantial work
last year to create the libraries we might use for implementation.  A
particularly exciting one is &lt;a href=&quot;https://github.com/MagnusS/jitsu&quot;&gt;Jitsu&lt;/a&gt; — which stands for Just In Time
Summoning of Unikernels. This is a DNS server that spawns unikernels in
response to DNS requests and boots them in real-time with no perceptible lag
to the end user.  In other words, it makes much more efficient use of
resources and significantly reduces latency of services for end-users —
services are only run &lt;em&gt;when&lt;/em&gt; they need to be, in the &lt;em&gt;places&lt;/em&gt; they need to be. &lt;/p&gt;

&lt;p&gt;There’s also been lots of efforts on other libraries that will help us
&lt;em&gt;iterate towards&lt;/em&gt; a complete solution. Initially, we will use pre-existing
implementations but in time we can take what we’ve learned and create more
robust alternatives. Some of the libraries are listed below (but note the
friendly disclaimers!). &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Source code&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dsheets/ocaml-sodium&quot;&gt;Bindings to libsodium&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dsheets/ocaml-dnscurve&quot;&gt;Implementation of DNSCurve&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dsheets/ocaml-libmacaroons&quot;&gt;Bindings to libmacaroons&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ocaml&quot;&gt;OCaml&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml&lt;/a&gt; is a mature, powerful and highly pragmatic language.  It’s
proven ideal for creating robust systems applications and
&lt;a href=&quot;http://ocaml.org/learn/companies.html&quot;&gt;many others&lt;/a&gt; also recognise this.  We’re using it to create all the
tools you’ve read about so far and we’re also helping to improve the ecosystem
around it.&lt;/p&gt;

&lt;p&gt;One of the major things we’ve been involved with is the coordination of the
OCaml Platform, which combines the OCaml compiler with a coherent set of tools
and workflows to be more productive in the language and speed up development
time.  We presented the first major release of these efforts at OCaml 2014 and
you can &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2014/ocaml2014_7.pdf&quot;&gt;read the abstract&lt;/a&gt; or &lt;a href=&quot;https://www.youtube.com/watch?v=jxhtpQ5nJHg&amp;amp;list=UUP9g4dLR7xt6KzCYntNqYcw&quot;&gt;watch the video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s more to come, as we continue to improve the tooling and also support
the community in &lt;a href=&quot;http://amirchaudhry.com/towards-governance-framework-for-ocamlorg&quot;&gt;other ways&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;early-steps-towards-applications&quot;&gt;Early steps towards applications&lt;/h3&gt;

&lt;p&gt;Building blocks are important but we also need to push towards working
applications.  There are different approaches we’ve taken to this, which
include building prototypes, wireframing use-cases and implementing features
with other toolstacks.  Some of this work is also part of a larger
&lt;a href=&quot;http://usercentricnetworking.eu&quot;&gt;EU funded project&lt;/a&gt;* and below are brief summaries of the things we’ve
done so far. We’ll expand on them as we do more over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mail&lt;/strong&gt; - As mentioned above, a prototype IMAP server exists (&lt;a href=&quot;https://opam.ocaml.org/packages/imaplet-lwt/imaplet-lwt.0.1.3/&quot;&gt;IMAPlet&lt;/a&gt;)
which uses Irmin to store data. This is already able to connect to a client to
serve mail. The important feature is that it’s an IMAP server which is version
controlled in the backend and can expose a REST API from the mailstore quite
easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contacts&lt;/strong&gt; - We first made wireframe mockups of the features we might like
in a contacts app (to follow in later post) and then built a
&lt;a href=&quot;https://github.com/yansh/contacts-app&quot;&gt;draft implementation&lt;/a&gt;. To get here, code was first written in OCaml
and then put through the &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; compiler. This is valuable as it
takes us closer to a point where we can build networks using our address books
and have the system take care of sharing details in a privacy-conscious manner
and with minimal maintenance. The &lt;a href=&quot;http://yansnotes.blogspot.co.uk/2015/01/work-summary-ocaml-labs.html&quot;&gt;summary post&lt;/a&gt; has more detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calendar&lt;/strong&gt; - This use-case was approached in a completely different way as
part of a hackathon last year. A rough but functional prototype was built over
one weekend, with a team formed at the event.  It was centralised but it
tested the idea that a service which integrates intimately with your life (to
the point of being very invasive) can provide disproportionate benefits.  The
&lt;a href=&quot;http://seedcamp.com/seedhack-5-0/&quot;&gt;experience report&lt;/a&gt; describes the weekend and our app — Clarity —
won first place. This was &lt;em&gt;great&lt;/em&gt; validation that the features are desirable
so we need to work towards a decentralised, privacy-conscious version.&lt;/p&gt;

&lt;h3 id=&quot;time-to-get-involved&quot;&gt;Time to get involved!&lt;/h3&gt;

&lt;p&gt;The coming year represents the best time to be working on the MISO stack and
using it to make Nymote a reality.  All source code is publicly available and
the projects are varied enough that there is something for everyone.  Browse
through issues, consider the &lt;a href=&quot;https://github.com/mirage/mirage-www/wiki/Pioneer-Projects&quot;&gt;projects&lt;/a&gt; or simply write online and
share with us the things you’d like to see.
This promises to be an exciting year!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sign up to the &lt;a href=&quot;http://nymote.us5.list-manage.com/subscribe?u=8a83b2d5453bba2ee5838b4ad&amp;amp;id=a41245094c&quot;&gt;mailing list&lt;/a&gt; to keep up to date!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* NB The research leading to these results has received
funding from the European Union’s Seventh Framework Programme FP7/2007-2013
under the UCN project, grant agreement no 611001.&lt;/em&gt;&lt;/p&gt;

&lt;!-- ========================================================= --&gt;

</description>
                <link>http://nymote.org/blog/2015/brewing-miso-to-serve-nymote</link>
                <guid>http://nymote.org/blog/2015/brewing-miso-to-serve-nymote</guid>
                <pubDate>2015-01-20T14:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Unikernels for everyone!</title>
                <description>
&lt;p&gt;Many people have now set up unikernels for blogs, documenting their
experiences for others to follow.  Even more important is that people are
going beyond static sites to build unikernels that provide more complicated
services and solve real-world problems.&lt;/p&gt;

&lt;p&gt;To help newcomers get started, there are now even more posts that that use
different tools and target different deployment methods.  Below are summaries
of some of the posts I found interesting and that will make it easier for you
try out different ways of creating and deploying your unikernels.&lt;/p&gt;

&lt;h3 id=&quot;unikernel-blogs-with-mirageos&quot;&gt;Unikernel blogs with MirageOS&lt;/h3&gt;

&lt;p&gt;Mindy picked up where the &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines/&quot;&gt;first set of instructions&lt;/a&gt;
finished and described her work to get an Octopress blog running on Amazon EC2.
As one of the first people outside the core team to work on this, she had a
lot of interesting experiences — which included getting into the Mirage
networking stack to debug an issue and submit a bugfix!  More recently, she
also wrote a couple of excellent posts on &lt;em&gt;why&lt;/em&gt; she uses a unikernel for her
blog.  These posts cover the security concerns (and responsibility) of running
networked services on today’s Internet and the importance of owning your
content — both ideas are at the heart of the work behind &lt;a href=&quot;http://nymote.org/&quot;&gt;Nymote&lt;/a&gt; and are
well worth reading.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Mindy’s posts&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Overview&lt;/em&gt; - &lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/08/18/i-am-unikernel/&quot;&gt;“I Am Unikernel (and So Can You!)”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;First in her Mirage series&lt;/em&gt; - &lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/03/14/its-a-mirage/&quot;&gt;“It’s a Mirage! (or, How to Shave a Yak.)”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/08/11/attack-surface-area/&quot;&gt;“Attack Surface: Why I Unikernel, Part 1”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/08/14/my-content-is-mine/&quot;&gt;“My Content Is Mine: Why I Unikernel, Part 2”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ian took a different path to AWS deployment by using Vagrant and Test Kitchen
to to get his static site together and build his unikernel, and then Packer to
create the images for deployment to EC2.  All succinctly explained with code
available on GitHub for others to try out!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Ian on&lt;/em&gt; &lt;a href=&quot;https://github.com/iw/mirage-jekyll&quot;&gt;“Mirage with Jekyll on Amazon EC2”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Toby wanted to put together a blog that was a little more complicated than a
traditional static site, with specific features like subdomains based on tags
and the ability to set future dates for posts. He also pulled in some other
libraries so he can use Mustache for sever-side rendering, where his blog
posts and metadata are stored as JSON and rendered on request.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Toby on&lt;/em&gt; &lt;a href=&quot;http://ocaml.is-awesome.net/2014/11/building-a-blog-with-mirage-os&quot;&gt;“Building a Blog with MirageOS”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chris saw others working to get unikernel blogs on EC2 and decide he’d try
getting his up and running on Linode instead.  He is the first person to
deploy his unikernel to Linode and he provided a great walkthough with helpful
screenshots, as well as brief notes about the handful of differences compared
with EC2.  Chris also wrote about the issue he had with clean urls (i.e
serving &lt;code&gt;/about/index.html&lt;/code&gt; when a user visits &lt;code&gt;/about/&lt;/code&gt;) — he describes the
things he tried out until he was finally able to fix it.  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Chris’ posts&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Setting up a unikernel&lt;/em&gt; - &lt;a href=&quot;http://christopherbothwell.com/ocaml/mirage/2014/12/03/about-not-found.html&quot;&gt;“About Not Found”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Deploying to Linode&lt;/em&gt; - &lt;a href=&quot;http://christopherbothwell.com/ocaml/mirage/linode/2014/12/08/hello-linode.html&quot;&gt;“Hello Linode”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phil focused on getting unikernels running on a cubieboards, which are ARM
based development boards — similar to the Raspberry Pi. He starts by taking
Mirage’s pre-built &lt;a href=&quot;http://blobs.openmirage.org&quot;&gt;Cubieboard images&lt;/a&gt; — which makes it easy to
get Xen and an OCaml environment set up on the board — and getting this
installed on the Cubieboard.  He also noted the issues he came across along
with the simple tweaks he made to fix them and finally serves a Mirage hello
world page.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Phil on&lt;/em&gt; &lt;a href=&quot;http://philtomson.github.io/blog/2014/09/10/some-notes-on-building-and-running-mirage-unikernels-on-cubieboard2/&quot;&gt;“Some Notes on Building and Running Mirage Unikernels on Cubieboard2”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-than-just-static-sites&quot;&gt;More than just static sites&lt;/h3&gt;

&lt;p&gt;Static sites have become the new ‘hello world’ app. They’re simple to manage,
low-risk and provide lots of opportunities to experience something new.  These
aspects make them ideal for discovering the benefits (and trade offs) of the
unikernel approach and I look forward to seeing what variations people come up
with — For instance, there aren’t any public instructions for deploying to
Rackspace so it would be great to read about someone’s experiences there.
However, there are also many other applications that also fit the above
criteria of simplicity, low risk and plentiful learning opportunities. &lt;/p&gt;

&lt;p&gt;Thomas Leonard decided to create a unikernel for a simple REST service for
queuing package uploads for 0install.  His post takes you from the very
beginning, with a simple hello world program running on Xen, all the way
through to creating his REST service. Along the way there a lots of code
snippets and explanations of the libraries being used and what they’re doing.
This is a great use-case for unikernels and there are a lot of interesting
things to take from this post, for example the ease with which Thomas was able
to find and fix bugs using regular tools. There’s also lots of information on
performance testing and optimising of the unikernel, which he covers in a
follow-up post, and he even built tools to visualise the traces. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Thomas’ posts&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Hello world and REST service&lt;/em&gt; - &lt;a href=&quot;http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/&quot;&gt;“My First Unikernel”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Profiling and optimisations&lt;/em&gt; - &lt;a href=&quot;http://roscidus.com/blog/blog/2014/08/15/optimising-the-unikernel/&quot;&gt;“Optimising the Unikernel”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Tool to visualise traces&lt;/em&gt; - &lt;a href=&quot;http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad&quot;&gt;“Visualising an Asynchronous Monad”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there’s much more activity out there than described in this post as
people continually propose ideas on the &lt;a href=&quot;http://lists.xenproject.org/cgi-bin/mailman/listinfo/mirageos-devel&quot;&gt;Mirage mailing list&lt;/a&gt; — both
for things they would like to try out and issues they came up against. In my
&lt;a href=&quot;http://nymote.org/blog/2014/from-jekyll-site-to-unikernel/&quot;&gt;last post&lt;/a&gt;, I pointed out that the workflow is applicable to any
type of unikernel and as Thomas showed, with bit of effort it’s already
possible to create useful, real-world services using the many libraries that
already exist. There’s also a lot of scaffolding in the &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt;
repo that you can build on which makes it even easier to get involved.  If you
want to dive deeper into the libraries and perhaps learn OCaml, there are lots
of &lt;a href=&quot;http://ocaml.org/learn/books.html&quot;&gt;resources online&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/mirage-www/wiki/Pioneer-Projects&quot;&gt;projects&lt;/a&gt; to get involved with too.&lt;/p&gt;

&lt;p&gt;Now is a great time to try building a unikernel for yourself and as you can
see from the posts above, shared experiences help other people progress
further and branch out into new areas. When you’ve had a chance to try
something out please do share your experiences online! &lt;/p&gt;

&lt;!-- ===== LINKS ===== --&gt;

</description>
                <link>http://nymote.org/blog/2015/unikernels-for-everyone</link>
                <guid>http://nymote.org/blog/2015/unikernels-for-everyone</guid>
                <pubDate>2015-01-19T13:00:00+00:00</pubDate>
        </item>

        <item>
                <title>From Jekyll site to Unikernel</title>
                <description>
&lt;p&gt;&lt;a href=&quot;http://nymote.org/software/mirage&quot;&gt;Mirage&lt;/a&gt; has reached a point where it&amp;#8217;s possible to easily set up
end-to-end toolchains to build &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernels&lt;/a&gt;! &lt;!--\[If you're not sure what that is, read the post [What is a unikernel?][amc-unikernel]\]--&gt;
My first use-case is to be able to generate a unikernel which can serve my
personal static site but to do it with as much automation as possible. It
turns out this is possible with less than 50 lines of code.&lt;/p&gt;

&lt;p&gt;I use Jekyll and GitHub Pages at the moment so I wanted a workflow that&amp;#8217;s as
easy to use, though I&amp;#8217;m happy to spend some time up front to set up and
configure things.
The tools for achieving what I want are in good shape so
this post takes the example of a Jekyll site and goes through
the steps to produce a unikernel on
&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; (a continuous integration service) which can later be
deployed.  Many of these instructions already exist in various forms but
they&amp;#8217;re collated here to aid this use-case.  &lt;/p&gt;

&lt;p&gt;I will take you, dear reader, through the process and when we&amp;#8217;re finished,
the workflow will be as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You&amp;#8217;ll write your posts on your local machine as normal&lt;/li&gt;
  &lt;li&gt;A push to GitHub will trigger a unikernel build for each commit&lt;/li&gt;
  &lt;li&gt;The Xen unikernel will be pushed to a repo for deployment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve this, we&amp;#8217;ll first check that we can build a unikernel VM locally,
then we&amp;#8217;ll set up a continuous integration service to automatically build
them for us and finally we&amp;#8217;ll adapt the CI service to also deploy the built
VM.  Although the amount of code required is small, each of these steps is
covered below in some detail.
For simplicity, I&amp;#8217;ll assume you already have OCaml and Opam
installed &amp;#8211; if not, you can find out how via the
&lt;a href=&quot;http://realworldocaml.org/install&quot;&gt;Real Word OCaml install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;building-locally&quot;&gt;Building locally&lt;/h2&gt;

&lt;p&gt;To ensure that the build actually works, you should run things locally at
least once before pushing to Travis.  It&amp;#8217;s worth noting that the
&lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt; repo contains a lot of useful, public domain examples
and helpfully, the specific code we need is in
&lt;a href=&quot;https://github.com/mirage/mirage-skeleton/tree/master/static_website&quot;&gt;mirage-skeleton/static_website&lt;/a&gt;.  Copy both the &lt;code&gt;config.ml&lt;/code&gt;
and &lt;code&gt;dispatch.ml&lt;/code&gt; files from that folder into a new &lt;code&gt;_mirage&lt;/code&gt; folder in your
jekyll repository.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;config.ml&lt;/code&gt; so that the two mentions of &lt;code&gt;./htdocs&lt;/code&gt; are replaced with
&lt;code&gt;../_site&lt;/code&gt;.  This is the only change you&amp;#8217;ll need to make and you should now
be able to build the unikernel with the unix backend.  Make sure you have
the mirage package installed by running &lt;code&gt;$ opam install mirage&lt;/code&gt; and then run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_mirage
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mirage configure --unix
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make depend       &lt;span class=&quot;c&quot;&gt;# needed as of mirage 1.2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mirage build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#8217;s all it takes!  In a few minutes there will be a unikernel built on
your system (symlinked as &lt;code&gt;_mirage/mir-www&lt;/code&gt;).  If there are any errors, make
sure that Opam is up to date and that you have the latest version of the
static_website files from &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt;. &lt;/p&gt;

&lt;h3 id=&quot;serving-the-site-locally&quot;&gt;Serving the site locally&lt;/h3&gt;

&lt;p&gt;If you&amp;#8217;d like to see this site locally, you can do so from within the
&lt;code&gt;_mirage&lt;/code&gt; folder by running unikernel you just built.  There&amp;#8217;s more
information about the details of this on the &lt;a href=&quot;http://openmirage.org/wiki/mirage-www&quot;&gt;Mirage docs site&lt;/a&gt;
but the quick instructions are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_mirage
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mirage run

&lt;span class=&quot;c&quot;&gt;# in another terminal window&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo ifconfig tap0 10.0.0.1 255.255.255.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now point your browser at http://10.0.0.2/ and see your site!
Once you&amp;#8217;re finished browsing, &lt;code&gt;$ mirage clean&lt;/code&gt; will clear up all the
generated files. &lt;/p&gt;

&lt;p&gt;Since the build is working locally, we can set up a continuous integration
system to perform the builds for us.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-travis-ci&quot;&gt;Setting up Travis CI&lt;/h2&gt;
&lt;p&gt;&lt;img style=&quot;float: right; margin-left: 10px&quot; src=&quot;http://amirchaudhry.com/images/jekyll-unikernel/travis.png&quot; /&gt;&amp;lt;/img&amp;gt;&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll be using the &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; service, which is free for open-source
projects (so this assumes you&amp;#8217;re using a public repo).  The benefit of using
Travis is that you can build a unikernel &lt;em&gt;without&lt;/em&gt; needing a local OCaml
environment, but it&amp;#8217;s always quicker to debug things locally.&lt;/p&gt;

&lt;p&gt;Log in to Travis using your GitHub ID which will then trigger a scan of your
repositories.  When this is complete, go to your Travis accounts page and
find the repo you&amp;#8217;ll be building the unikernel from.  Switch it &amp;#8216;on&amp;#8217; and
Travis will automatically set your GitHub post-commit hook and token for you.
That&amp;#8217;s all you need to do on the website.&lt;/p&gt;

&lt;p&gt;When you next make a push to your repository, GitHub will inform Travis,
which will then look for a YAML file in the root of the repo called
&lt;code&gt;.travis.yml&lt;/code&gt;.  That file describes what Travis should do and what the build
matrix is.  Since OCaml is not one of the supported languages, we&amp;#8217;ll be
writing our build script manually (this is actually easier than it sounds).
First, let&amp;#8217;s set up the YAML file and then we&amp;#8217;ll examine the build script.&lt;/p&gt;

&lt;h3 id=&quot;the-travis-yaml-file---travisyml&quot;&gt;The Travis YAML file - .travis.yml&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://docs.travis-ci.com/user/ci-environment/#CI-environment-OS&quot;&gt;Travis CI environment&lt;/a&gt; is based on Ubuntu 12.04, with a
number of things pre-installed (e.g Git, networking tools etc).  Travis
doesn&amp;#8217;t support OCaml (yet) so we&amp;#8217;ll use the &lt;code&gt;c&lt;/code&gt; environment to get the
packages we need, specifically, the OCaml compiler, Opam and Mirage. Once
those are set up, our build should run pretty much the same as it did locally.&lt;/p&gt;

&lt;p&gt;For now, let&amp;#8217;s keep things simple and only focus on the latest releases
(OCaml 4.01.0 and Opam 1.1.1), which means our build matrix is very simple.
The build instructions will be in the file &lt;code&gt;_mirage/travis.sh&lt;/code&gt;, which we
will move to and trigger from the &lt;code&gt;.travis.yml&lt;/code&gt; file.  This means our YAML
file should look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cd _mirage&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -ex travis.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=xen DEPLOY=0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=unix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The matrix enables us to have parallel builds for different environments and
this one is very simple as it&amp;#8217;s only building two unikernels. One worker
will build for the Xen backend and another worker will build for the Unix
backend. The &lt;code&gt;_mirage/travis.sh&lt;/code&gt; script will clarify what each of these
environments translates to.  We&amp;#8217;ll come back to the &lt;code&gt;DEPLOY&lt;/code&gt; flag later on
(it&amp;#8217;s not necessary yet).  Now that this file is set up, we can work on the
build script itself.&lt;/p&gt;

&lt;h3 id=&quot;the-build-script---travissh&quot;&gt;The build script - travis.sh&lt;/h3&gt;

&lt;p&gt;To save time, we&amp;#8217;ll be using an Ubuntu PPA to quickly get
&lt;a href=&quot;https://launchpad.net/~avsm&quot;&gt;pre-packaged versions of the OCaml compiler and Opam&lt;/a&gt;, so the
first thing to do is define which PPAs each line of the build matrix
corresponds to.  Since we&amp;#8217;re keeping things simple, we only need one PPA
that has the most recent releases of OCaml and Opam.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml41+opam11
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo add-apt-repository ppa:&lt;span class=&quot;nv&quot;&gt;$ppa&lt;/span&gt;
sudo apt-get update -qq
sudo apt-get install -qq ocaml ocaml-native-compilers camlp4-extra opam&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;[NB: There are many &lt;a href=&quot;https://launchpad.net/~avsm&quot;&gt;other PPAs&lt;/a&gt; for different combinations of
OCaml/Opam which are useful for testing].  Once the appropriate PPAs have
been set up it&amp;#8217;s time to initialise Opam and install Mirage. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPAMYES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
opam init
opam install mirage
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;opam config env&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We set &lt;code&gt;OPAMYES=1&lt;/code&gt; to get non-interactive use of Opam (it defaults to &amp;#8216;yes&amp;#8217;
for any user input) and if we want full build logs, we could also set
&lt;code&gt;OPAMVERBOSE=1&lt;/code&gt; (I haven&amp;#8217;t in this example).
The rest should be straight-forward and you&amp;#8217;ll end up with an
Ubuntu machine with OCaml, Opam and the Mirage package installed.  It&amp;#8217;s now
trivial to do the next step of actually building the unikernel!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mirage configure --&lt;span class=&quot;nv&quot;&gt;$MIRAGE_BACKEND&lt;/span&gt;
mirage build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how we&amp;#8217;ve used the environment variable from the Travis file and
this is where our two parallel builds begin to diverge.  When you&amp;#8217;ve saved
this file, you&amp;#8217;ll need to change permissions to make it executable by doing
&lt;code&gt;$ chmod +x _mirage/travis.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all you need to build the unikernel on Travis!  You should now commit
both the YAML file and the build script to the repo and push the changes to
GitHub.  Travis should automatically start your first build and you can
watch the console output online to check that both the Xen and Unix backends
complete properly.  If you notice any errors, you should go back over your
build script and fix it before the next step.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[NB: If you have a larger site, you may have to use a different file system
option for the configuration. Specifically,
*&lt;code&gt;$ FS=fat mirage configure --$MIRAGE_BACKEND&lt;/code&gt;&lt;/em&gt;, which will crate a disk
image of the website content using the &lt;a href=&quot;http://en.wikipedia.org/wiki/File_Allocation_Table&quot;&gt;FAT file system&lt;/a&gt; format
(&lt;em&gt;&lt;code&gt;fat1.img&lt;/code&gt;&lt;/em&gt;). This means you&amp;#8217;ll also need to keep track of the disk image
for the deployment stage as your unikernel VM will connect to it. Look at the
&lt;a href=&quot;https://github.com/nymote/nymote.github.io/blob/master/_mirage/travis.sh&quot;&gt;nymote build script&lt;/a&gt; for an example.]*&lt;/p&gt;

&lt;h2 id=&quot;deploying-your-unikernel&quot;&gt;Deploying your unikernel&lt;/h2&gt;
&lt;p&gt;&lt;img style=&quot;float: right; margin-left: 10px&quot; src=&quot;http://amirchaudhry.com/images/jekyll-unikernel/octocat.png&quot; /&gt;&amp;lt;/img&amp;gt;&lt;/p&gt;

&lt;p&gt;When Travis has finished its builds it will simply destroy the worker and
all its contents, including the unikernels we just built.  This is perfectly
fine for testing but if we want to also &lt;em&gt;deploy&lt;/em&gt; a unikernel, we need to get
it out of the Travis worker after it&amp;#8217;s built. In this case, we want to
extract the Xen-based unikernel so that we can later start it on a Xen-based
machine (e.g Amazon, Rackspace or - in our case - a machine on &lt;a href=&quot;http://www.bytemark.co.uk&quot;&gt;Bytemark&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Since the unikernel VMs are small (only tens of MB), our method for
exporting will be to commit the Xen unikernel into a repository on GitHub.
It can be retrieved and started later on and keeping the VMs in version
control gives us very effective snapshots (we can roll back the site without
having to rebuild).  This is something that would be much more challenging
if we were using the &amp;#8216;standard&amp;#8217; web toolstack.&lt;/p&gt;

&lt;p&gt;The deployment step is a little more complex as we have to send the
Travis worker a private SSH key, which will give it push access to a GitHub
repository.  Of course, we don&amp;#8217;t want to expose that key by simply adding it
to the Travis file so we have to encrypt it somehow. &lt;/p&gt;

&lt;h3 id=&quot;sending-travis-a-private-ssh-key&quot;&gt;Sending Travis a private SSH key&lt;/h3&gt;

&lt;p&gt;Travis supports &lt;a href=&quot;http://docs.travis-ci.com/user/encryption-keys/&quot;&gt;encrypted environment variables&lt;/a&gt;. Each
repository has its own public key and the &lt;a href=&quot;http://rubygems.org/gems/travis&quot;&gt;Travis gem&lt;/a&gt; uses
this public key to encrypt data, which you then add to your &lt;code&gt;.travis.yml&lt;/code&gt;
file for decryption by the worker.  This is meant for sending things like
private API tokens and other small amounts of data. Trying to encrypt an SSH
key isn&amp;#8217;t going to work as it&amp;#8217;s too large.  Instead we&amp;#8217;ll use
&lt;a href=&quot;https://github.com/avsm/travis-senv&quot;&gt;travis-senv&lt;/a&gt;, which encodes, encrypts and chunks up the key into smaller
pieces and then reassembles those pieces on the Travis worker.  We still use
the Travis gem to encrypt the pieces to add them to the &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;While you could give Travis a key that accesses your whole GitHub account, my
preference is to create a &lt;em&gt;new&lt;/em&gt; deploy key, which will only be used for
&lt;a href=&quot;https://help.github.com/articles/managing-deploy-keys#deploy-keys&quot;&gt;deployment to one repository&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# make a key pair on your local machine&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ssh/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen -t dsa -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;travis.deploy&amp;quot;&lt;/span&gt; -f travis-deploy_dsa
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this is a 1024 bit key so if you decide to use a 2048 bit key,
then be aware that Travis &lt;a href=&quot;https://github.com/avsm/travis-senv/issues/1&quot;&gt;sometimes has issues&lt;/a&gt;. Now that we have
a key, we can encrypt it and add it to the Travis file. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# on your local machine&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install the necessary components&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install travis
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam install travis-senv

&lt;span class=&quot;c&quot;&gt;# chunk the key, add to yml file and rm the intermediate&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;travis-senv encrypt ~/.ssh/travis-deploy_dsa _travis_env
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat _travis_env &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; travis encrypt -ps --add
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm _travis_env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;travis-senv&lt;/code&gt; encrypts and chunks the key locally on your machine, placing
its output in a file you decide (&lt;code&gt;_travis_env&lt;/code&gt;).  We then take that output
file and pipe it to the &lt;code&gt;travis&lt;/code&gt; ruby gem, asking it to encrypt the input,
treating each line as separate and to be appended (&lt;code&gt;-ps&lt;/code&gt;) and then actually
adding that to the Travis file (&lt;code&gt;--add&lt;/code&gt;).  You can run &lt;code&gt;$ travis encrypt -h&lt;/code&gt;
to understand these options.  Once you&amp;#8217;ve run the above commands,
&lt;code&gt;.travis.yml&lt;/code&gt; will look as follows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cd _mirage&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -ex travis.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=xen DEPLOY=0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=unix&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The number of secure variables added depends on the type and size of the key
you had to chunk, so it could vary from 8 up to 29. We&amp;#8217;ll commit
these additions later on, alongside additions to the build script.&lt;/p&gt;

&lt;p&gt;At this point, we also need to make a repository on GitHub
and add the public deploy key so
that Travis can push to it.  Once you&amp;#8217;ve created your repo and added a
README, follow GitHub&amp;#8217;s instructions on &lt;a href=&quot;https://help.github.com/articles/managing-deploy-keys#deploy-keys&quot;&gt;adding deploy keys&lt;/a&gt;
and paste in the public key (i.e. the content of &lt;code&gt;travis-deploy_dsa.pub&lt;/code&gt;).  &lt;/p&gt;

&lt;p&gt;Now that we can securely pass a private SSH key to the worker
and have a repo that the worker can push to, we need to
make additions to the build script.&lt;/p&gt;

&lt;h3 id=&quot;committing-the-unikernel-to-a-repository&quot;&gt;Committing the unikernel to a repository&lt;/h3&gt;

&lt;p&gt;Since we can set &lt;code&gt;DEPLOY=1&lt;/code&gt; in the YAML file we only need to make
additions to the build script.  Specifically, we want to assure that: only
the Xen backend is deployed; only &lt;em&gt;pushes&lt;/em&gt; to the repo result in
deployments, not pull requests (we do still want &lt;em&gt;builds&lt;/em&gt; for pull requests).&lt;/p&gt;

&lt;p&gt;In the build script (&lt;code&gt;_mirage/travis.sh&lt;/code&gt;), which is being run by the worker,
we&amp;#8217;ll have to reconstruct the SSH key and configure Git.  In addition,
Travis gives us a set of useful &lt;a href=&quot;http://docs.travis-ci.com/user/ci-environment/#Environment-variables&quot;&gt;environment variables&lt;/a&gt; so we&amp;#8217;ll
use the latest commit hash (&lt;code&gt;$TRAVIS_COMMIT&lt;/code&gt;) to name the the VM (which also
helps us trace which commit it was built from).&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s easier to consider this section of code at once so I&amp;#8217;ve explained the
details in the comments. This section is what you need to add at the end of
your existing build script (i.e straight after &lt;code&gt;mirage build&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Only deploy if the following conditions are met.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$MIRAGE_BACKEND&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xen&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;$DEPLOY&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TRAVIS_PULL_REQUEST&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# The Travis worker will already have access to the chunks&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# passed in via the yaml file. Now we need to reconstruct &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the GitHub SSH key from those and set up the config file.&lt;/span&gt;
    opam install travis-senv
    mkdir -p ~/.ssh
    travis-senv decrypt &amp;gt; ~/.ssh/id_dsa &lt;span class=&quot;c&quot;&gt;# This doesn&amp;#39;t expose it&lt;/span&gt;
    chmod &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt; ~/.ssh/id_dsa             &lt;span class=&quot;c&quot;&gt;# Owner can read and write&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Host some_user github.com&amp;quot;&lt;/span&gt;   &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  Hostname github.com&amp;quot;&lt;/span&gt;          &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  StrictHostKeyChecking no&amp;quot;&lt;/span&gt;     &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  CheckHostIP no&amp;quot;&lt;/span&gt;               &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  UserKnownHostsFile=/dev/null&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config

    &lt;span class=&quot;c&quot;&gt;# Configure the worker&amp;#39;s git details&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# otherwise git actions will fail.&lt;/span&gt;
    git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;user@example.com&amp;quot;&lt;/span&gt;
    git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;Travis Build Bot&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Do the actual work for deployment.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Clone the deployment repo. Notice the user,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# which is the same as in the ~/.ssh/config file.&lt;/span&gt;
    git clone git@some_user:amirmc/www-test-deploy
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;www-test-deploy

    &lt;span class=&quot;c&quot;&gt;# Make a folder named for the commit. &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# If we&amp;#39;re rebuiling a VM from a previous&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# commit, then we need to clear the old one.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Then copy in both the config file and VM.&lt;/span&gt;
    rm -rf &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
    mkdir -p &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
    cp ../mir-www.xen ../config.ml &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Compress the VM and add a text file to note&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the commit of the most recently built VM.&lt;/span&gt;
    bzip2 -9 &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;/mir-www.xen
    git pull --rebase
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt; &amp;gt; latest    &lt;span class=&quot;c&quot;&gt;# update ref to most recent&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Add, commit and push the changes!&lt;/span&gt;
    git add &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt; latest
    git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;adding $TRAVIS_COMMIT built for $MIRAGE_BACKEND&amp;quot;&lt;/span&gt;
    git push origin master
    &lt;span class=&quot;c&quot;&gt;# Go out and enjoy the Sun!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you should commit the changes to &lt;code&gt;./travis.yml&lt;/code&gt; (don&amp;#8217;t forget
the deploy flag) and &lt;code&gt;_mirage/travis.sh&lt;/code&gt; and push the changes to GitHub.
Everything else will take place automatically and in a few minutes you will
have a unikernel ready to deploy on top of Xen! &lt;/p&gt;

&lt;p&gt;You can see both the complete YAML file and build script in use on my
&lt;a href=&quot;https://github.com/amirmc/www-test&quot;&gt;test repo&lt;/a&gt;, as well as the &lt;a href=&quot;https://travis-ci.org/amirmc/www-test&quot;&gt;build logs&lt;/a&gt; for that repo
and the &lt;a href=&quot;https://github.com/amirmc/www-test-deploy&quot;&gt;deploy repo&lt;/a&gt; with a VM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Pro-tip: If you add *&lt;code&gt;[skip ci]&lt;/code&gt;&lt;/em&gt; anywhere in your
commit message, Travis will skip the build for that commit.
This is very useful if you&amp;#8217;re making minor changes, like updating a
README.]*&lt;/p&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;Since I&amp;#8217;m still using Jekyll for my website, I made a short script in my
jekyll repository (&lt;code&gt;_deploy-unikernel.sh&lt;/code&gt;) that builds the site, commits the
contents of &lt;code&gt;_site&lt;/code&gt; and pushes to GitHub. I simply run this after I&amp;#8217;ve
committed a new blog post and the rest takes care of itself.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
jekyll build
git add _site
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;update _site&amp;#39;&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! You now have an end-to-end workflow that will produce a
unikernel VM from your Jekyll-based site and push it to a repo.  If you
strip out all the comments, you&amp;#8217;ll see that we&amp;#8217;ve written less than 50 lines
of code! Admittedly, I&amp;#8217;m not counting the 80 or so lines that came for free
in the &lt;code&gt;*.ml&lt;/code&gt; files but that&amp;#8217;s still pretty impressive.&lt;/p&gt;

&lt;p&gt;Of course, we still need a machine to take that VM and run it but that&amp;#8217;s a
topic for another post.  For the time-being, I&amp;#8217;m still using GitHub Pages
but once the VM is hosted somewhere, I will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Turn off GitHub Pages and serve from the VM &amp;#8211; but still using Jekyll in
the workflow.&lt;/li&gt;
  &lt;li&gt;Replace Jekyll with OCaml-based static-site generation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although all the tools already exist to switch now, I&amp;#8217;m taking my time so
that I can easily maintain the code I end up using.&lt;/p&gt;

&lt;h2 id=&quot;expanding-the-script-for-testing&quot;&gt;Expanding the script for testing&lt;/h2&gt;

&lt;p&gt;You may have noticed that the examples here are not very flexible or
extensible but that was a deliberate choice to keep them readable.  It&amp;#8217;s
possible to do much more with the build matrix and script, as you can see
from the Travis files on my &lt;a href=&quot;https://github.com/amirmc/amirmc.github.com/tree/master/_mirage&quot;&gt;website repo&lt;/a&gt;, which were based on
those of the &lt;a href=&quot;https://github.com/mirage/mirage-www&quot;&gt;Mirage site&lt;/a&gt; and &lt;a href=&quot;https://github.com/mor1/mort-www&quot;&gt;Mort&amp;#8217;s site&lt;/a&gt;.
Specifically, you can note the use of more environment variables and case
statements to decide which PPAs to grab.  Once you&amp;#8217;ve got your builds
working, it&amp;#8217;s worth improving your scripts to make them more maintainable
and cover the test cases you feel are important.&lt;/p&gt;

&lt;h3 id=&quot;not-just-for-static-sites-surprise&quot;&gt;Not just for static sites (surprise!)&lt;/h3&gt;

&lt;p&gt;You might have noticed that in very few places in the toolchain above have I
mentioned anything specific to static sites per se.  The workflow is simply
(1) do some stuff locally, (2) push to a continuous integration service
which then (3) builds and deploys a Xen-based unikernel.  Apart from the
convenient folder structure, the specific work to treat this as a static
site lives in the &lt;code&gt;*.ml&lt;/code&gt; files, which I&amp;#8217;ve skipped over for this post.  &lt;/p&gt;

&lt;p&gt;As such, the GitHub+Travis workflow we&amp;#8217;ve developed here is quite general
and will apply to almost &lt;em&gt;any&lt;/em&gt; unikernels that we may want to construct.
I encourage you to explore the examples in the &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt; repo and
keep your build script maintainable.  We&amp;#8217;ll be using it again the next time
we build unikernel devices.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements:&lt;/em&gt; There were lots of things I read over while writing this
post but there were a few particularly useful things that you should look up.
Anil&amp;#8217;s posts on &lt;a href=&quot;http://anil.recoil.org/2013/09/30/travis-and-ocaml.html&quot;&gt;Testing with Travis&lt;/a&gt; and
&lt;a href=&quot;http://anil.recoil.org/2013/10/06/travis-secure-ssh-integration.html&quot;&gt;Travis for secure deployments&lt;/a&gt; are quite succinct (and
were themselves prompted by &lt;a href=&quot;http://blog.mlin.net/2013/02/testing-ocaml-projects-on-travis-ci.html&quot;&gt;Mike Lin&amp;#8217;s Travis post&lt;/a&gt; several
months earlier). Looking over Mort&amp;#8217;s &lt;a href=&quot;https://github.com/mor1/mort-www/blob/master/.travis-build.sh&quot;&gt;build script&lt;/a&gt; and that of
&lt;a href=&quot;https://github.com/mirage/mirage-www/blob/master/.travis-ci.sh&quot;&gt;mirage-www&lt;/a&gt; helped me figure out the deployment steps as well as improve
my own script. Special thanks also to &lt;a href=&quot;http://erratique.ch&quot;&gt;Daniel&lt;/a&gt;, &lt;a href=&quot;http://www.lpw25.net&quot;&gt;Leo&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org&quot;&gt;Anil&lt;/a&gt; for
commenting on an earlier draft of this post.&lt;/p&gt;

&lt;p&gt;This post was previously published on my &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines/&quot;&gt;personal site&lt;/a&gt;.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2014/from-jekyll-site-to-unikernel</link>
                <guid>http://nymote.org/blog/2014/from-jekyll-site-to-unikernel</guid>
                <pubDate>2014-03-16T19:30:00+00:00</pubDate>
        </item>

        <item>
                <title>Summary of FOSDEM 2014</title>
                <description>
&lt;p&gt;It&amp;#8217;s been just over a week since FOSDEM ended and it was even more hectic 
than we imagined.  Thousands of open source developers across dozens of 
rooms and speakers and lots of delicious waffles.  I&amp;#8217;m still in awe that 
this is a completely volunteer organised event and that everything appeared 
to run smoothly.  Especially, since this has to be the &lt;em&gt;only&lt;/em&gt; conference 
I&amp;#8217;ve been at where the wifi was usable (and ubiquitous).  &lt;/p&gt;

&lt;p&gt;The most interesting aspect was how crowded some of the rooms became and how 
quickly.  For example, the &lt;a href=&quot;https://fosdem.org/2014/schedule/track/configuration_management/&quot;&gt;configuration management track&lt;/a&gt; was 
pretty much full throughout the day with a crowd of people trying to get in.
I heard that the Mozilla track was equally busy as were some other devrooms.
This may be in indication of relative popularity but also the sheer scale 
that this annual event has reached. It may be outgrowing ULB.  Thankfully, 
&lt;a href=&quot;https://fosdem.org/2014/news/2014-02-03-videos/&quot;&gt;videos will be available&lt;/a&gt; this year so I hope I can catchup 
up with the sessions I couldn&amp;#8217;t get to!  One that I was particularly 
interested in is the &lt;a href=&quot;http://www.xenproject.org/developers/teams/arm-hypervisor.html&quot;&gt;Xen/ARM&lt;/a&gt; talk in the &lt;a href=&quot;https://fosdem.org/2014/schedule/track/automotive_development/&quot;&gt;Automotive track&lt;/a&gt;.
Since cars are now getting smarter and Xen works on embedded devices it 
would be an excellent use case for Mirage to ensure that the software 
running in vehicles is safe and does only what it&amp;#8217;s supposed to.  There were 
many other Xen talks too and you catchup with them on the 
&lt;a href=&quot;http://blog.xen.org/index.php/2014/02/07/xen-fosdem14-an-even-report/&quot;&gt;Xen blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Mail track talks were crowded and during the 
&lt;a href=&quot;https://fosdem.org/2014/schedule/track/mail/&quot;&gt;postfix talk&lt;/a&gt; we were treated to an interesting review of 
spam around the globe, which was followed up by the Mailpile team announcing 
their &lt;a href=&quot;https://www.mailpile.is/blog/2014-01-31_Alpha_Release_Shipping_Bits_and_Atoms.html&quot;&gt;alpha release&lt;/a&gt; on stage! The 
&lt;a href=&quot;https://fosdem.org/2014/schedule/track/internet_of_things/&quot;&gt;Internet of Things devroom&lt;/a&gt; had a number of interesting talks 
but there need to be more people thinking about the underlying 
infrastructure needs before we can begin building resilient, decentralised 
networks.&lt;/p&gt;

&lt;p&gt;For the Mirage talk, Mort and Anil gave a great demo by building unikernels 
on stage to show the process in action.  They continued the demos at the Xen 
stall to a number of people including some surprisingly young FOSDEM 
attendees.  We&amp;#8217;ll soon be moving our personal websites to become self-hosted 
unikernels, and from there we can build out more of the Nymote toolstack.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve captured some of the interesting tweets and pictures below and 
hopefully next year we&amp;#8217;ll be speaking at FOSDEM about how we&amp;#8217;re using the 
Nymote toolstack.&lt;/p&gt;

&lt;div class=&quot;storify&quot;&gt;&amp;lt;iframe src=&quot;//storify.com/amirmc/fosdem/embed?header=false&amp;amp;border=false&quot; width=&quot;100%&quot; height=750 frameborder=no allowtransparency=true&amp;gt;&lt;script src=&quot;//storify.com/amirmc/fosdem.js?header=false&amp;amp;border=false&quot;&gt;&lt;/script&gt;&lt;noscript&gt;[&lt;a href=&quot;//storify.com/amirmc/fosdem&quot; target=&quot;_blank&quot;&gt;View the story &quot;Summary of FOSDEM 2014&quot; on Storify&lt;/a&gt;]&lt;/noscript&gt;&lt;/div&gt;
</description>
                <link>http://nymote.org/blog/2014/fosdem-summary</link>
                <guid>http://nymote.org/blog/2014/fosdem-summary</guid>
                <pubDate>2014-02-11T13:40:00+00:00</pubDate>
        </item>

        <item>
                <title>Heading to FOSDEM!</title>
                <description>
&lt;p&gt;We&amp;#8217;re heading to &lt;a href=&quot;https://fosdem.org/2014/&quot;&gt;FOSDEM&lt;/a&gt; in a few days!  If you haven&amp;#8217;t heard of FOSDEM 
before, it&amp;#8217;s a two-day, volunteer-organised event to promote open source 
software.  It takes place in Brussels and there will be over 500 talks, 
across 44 tracks attended by around 5000 people. The numbers alone don&amp;#8217;t 
capture the scale of the event so click though the image below for a view of 
the schedule &amp;#8211; and that&amp;#8217;s just for the Saturday. Did I mention this is all 
run by volunteers?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2014/schedule/day/saturday/&quot;&gt;&lt;img src=&quot;http://nymote.org/images/fosdem-sat.jpg&quot; alt=&quot;FOSDEM on Saturday&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll be meeting a bunch of like-minded people in the various sessions and 
talking more about how the Nymote stack is progressing, especially as Mirage 
is gaining momentum after the &lt;a href=&quot;http://nymote.org/blog/2014/announcing-first-mirage-release/&quot;&gt;1.0 release&lt;/a&gt;.  Anil and Mort 
will be giving a talk about Mirage on Sunday at 1pm (&lt;a href=&quot;https://fosdem.org/2014/schedule/event/mirageos/&quot;&gt;details&lt;/a&gt;) 
and also giving demos at the Xen Booth from 2:30pm-4:30pm (in Building K on 
the 1st floor).  Since deployment to embedded systems is also important, 
we&amp;#8217;re interested in open source efforts on ARM devices like the 
&lt;a href=&quot;https://fosdem.org/2014/schedule/event/arm_allwinner_sunxi_socs/&quot;&gt;Allwinner SoC community&lt;/a&gt; &amp;#8211; especially since Anil has been hacking 
on &lt;a href=&quot;http://www.xenproject.org/developers/teams/arm-hypervisor.html&quot;&gt;Xen/ARM&lt;/a&gt; on a cubieboard. There are a number of other Xen-related 
talks and you can find out more from the &lt;a href=&quot;http://blog.xen.org/index.php/2014/01/10/xen-related-talks-fosdem-2014/&quot;&gt;Xen blog&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Given the use-cases for Nymote, there are some obvious places you can expect 
to find us.  On Saturday there&amp;#8217;s the &lt;a href=&quot;https://fosdem.org/2014/schedule/track/mail/&quot;&gt;Mail track&lt;/a&gt;, where we&amp;#8217;ll 
be discussing existing tools and catching up up with the Mailpile guys, who 
we last &lt;a href=&quot;http://nymote.org/blog/2013/indiewebcamp-uk/&quot;&gt;met at IndieWebCamp&lt;/a&gt;.  On the Sunday, there&amp;#8217;s the 
&lt;a href=&quot;https://fosdem.org/2014/schedule/track/internet_of_things/&quot;&gt;Internet of Things dev-room&lt;/a&gt;, where we&amp;#8217;ll bring up the upcoming 
problems we see regarding centralised IoT services and how Nymote will 
change this.  In addition, a colleague from the lab, &lt;a href=&quot;http://www.cl.cam.ac.uk/~jra40/&quot;&gt;Jon Anderson&lt;/a&gt;,
is speaking about security and the &lt;a href=&quot;http://www.cl.cam.ac.uk/research/security/capsicum/&quot;&gt;Capscium project&lt;/a&gt;, which is 
relevant for sandboxing security (&lt;a href=&quot;https://fosdem.org/2014/schedule/event/capiscum/&quot;&gt;details&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll be writing up our experiences shortly after we return and in the 
meantime, the real issue will be deciding which sessions to go to.  If 
you&amp;#8217;re in Brussels for that weekend do get in touch with us!  We love to 
meet people working towards the same goals.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2014/heading-to-fosdem-2014</link>
                <guid>http://nymote.org/blog/2014/heading-to-fosdem-2014</guid>
                <pubDate>2014-01-30T09:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Announcing the first major release of Mirage - the Cloud Operating System</title>
                <description>
&lt;p&gt;We’re very pleased to announce that version 1.0 of Mirage, the first of the 
components, has been released! This is the first major release of Mirage and 
represents many years of development, testing and community building. As 
mentioned previously, there are three main components of the 
&lt;a href=&quot;http://nymote.org/blog/2013/introducing-nymote/&quot;&gt;Nymote toolstack&lt;/a&gt;, which are: &lt;a href=&quot;http://nymote.org/software/mirage/&quot;&gt;Mirage&lt;/a&gt; - an 
operating system for the cloud, &lt;a href=&quot;http://nymote.org/software/signpost/&quot;&gt;Signpost&lt;/a&gt; - an identity and 
connectivity system and &lt;a href=&quot;http://nymote.org/software/irmin/&quot;&gt;Irmin&lt;/a&gt; - a distributed database. As 
always, the best way to learn is to try things out, so follow the revamped 
&lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;install instructions&lt;/a&gt; and create your own webserver to host 
a static website!&lt;/p&gt;

&lt;p&gt;We’ve written before &lt;a href=&quot;http://nymote.org/blog/2013/overview-of-mirage/&quot;&gt;about Mirage and its importance&lt;/a&gt; and this 
1.0 release represents the first stable toolkit for creating appliances. 
One of the first places where we’ll be using Mirage is this (and other) 
websites.  We will take all the content you see on this site and compile it, 
along with the required components from a operating system (e.g networking 
and a file system) together with webserver functionality and create a small, 
fully-functioning appliance.  We’ll then run that appliance directly on top 
of the Xen hypervisor on the public cloud.  The &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage website&lt;/a&gt; 
has been running this way for some time and that unikernel appliance is 
around 1MB in size (including all content). 
To make it easier for others to generate sites this way we’ve been creating 
&lt;a href=&quot;http://openmirage.org/blog/decks-n-drums&quot;&gt;new tools&lt;/a&gt; that help with static site generation.  As the 
appliances are so small, we’re even able to check them into version control 
systems so you can easily roll-back to a previous version without having to 
recompile anything! You can see the 
&lt;a href=&quot;https://github.com/mirage/mirage-www-deployment&quot;&gt;repository of previous unikernels&lt;/a&gt; to get an idea of this 
in action.&lt;/p&gt;

&lt;p&gt;The Mirage team will also be using the new tools to convert their personal 
websites into unikernel appliances and as we create and release more 
libraries we’ll be incorporating those also.  For example, once we have a 
workflow with unikernel websites it becomes much easier to add other 
functionality because it’s a simple matter of using the appropriate 
libraries, writing some application code and then deploying to the cloud. 
In other words, you begin to reap the benefits of having a operating system 
that works for you in the cloud, while ensuring it remains lean and safe. 
For example, we could incorporate &lt;a href=&quot;http://en.wikipedia.org/wiki/CardDAV‎&quot;&gt;CardDAV&lt;/a&gt; and then use our own 
infrastructure to synchronise contacts between our mobile devices, instead 
of relying on third-parties to do it for us.  As this process becomes more 
streamlined, it’s easy to see how we can build up to having our own personal 
cloud by incorporating only the features we need, when we need them and 
always under our control.&lt;/p&gt;

&lt;p&gt;There have been a number of articles about Mirage, and a good introduction 
to the concept and direction is in the recent Communications of the ACM 
article called 
&lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;Unikernels: Rise of the Virtual Library Operating System&lt;/a&gt;. 
There are also write ups about the Mirage release at &lt;a href=&quot;http://www.eweek.com/cloud/xen-project-builds-its-own-cloud-os-mirage.html/&quot;&gt;eWeek&lt;/a&gt;, &lt;a href=&quot;http://www.infoworld.com/t/operating-systems/xen-mirage-the-less-more-cloud-os-233823&quot;&gt;InfoWorld&lt;/a&gt;
and a general overview on &lt;a href=&quot;http://www.linux.com/news/enterprise/cloud-computing/751156-are-cloud-operating-systems-the-next-big-thing&quot;&gt;Linux.com&lt;/a&gt; (a full list is 
on the self-hosted &lt;a href=&quot;http://openmirage.org/links&quot;&gt;Mirage website&lt;/a&gt;).  We’re looking 
forward to the upcoming activities for 2014 and the new avenues that Mirage 
will open up for us!&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2014/announcing-first-mirage-release</link>
                <guid>http://nymote.org/blog/2014/announcing-first-mirage-release</guid>
                <pubDate>2014-01-13T17:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Looking forward to 2014</title>
                <description>
&lt;p&gt;This year has been an interesting one for proponents of decentralisation, 
privacy and open protocols.  We&amp;#8217;ve had revelations about 
&lt;a href=&quot;http://www.theguardian.com/world/the-nsa-files&quot;&gt;mass-surveillance&lt;/a&gt; by Governments, a number of open source 
projects, who want to put the user back in control (&lt;a href=&quot;https://www.mailpile.is&quot;&gt;Mailpile&lt;/a&gt;, &lt;a href=&quot;https://arkos.io&quot;&gt;arkOS&lt;/a&gt;, 
&lt;a href=&quot;http://darkmail.info&quot;&gt;Dark Mail Alliance&lt;/a&gt; and many others), as well as efforts to 
bring more of these projects to light (e.g. &lt;a href=&quot;http://redecentralize.org&quot;&gt;redecentralize&lt;/a&gt;). We also 
have a number of exciting new research initiatives to work on the technology 
problems of decentralisation (e.g &lt;a href=&quot;http://usercentricnetworking.eu]&quot;&gt;User Centric Networking&lt;/a&gt;). Overall, 
2014 promises to be an exciting year of new software releases and increasing 
momentum for such projects.&lt;/p&gt;

&lt;p&gt;From our point of view we&amp;#8217;ll be having some imminent software releases, 
which will make significant advances to safely hosting your own content in a 
manner that is secure, economical and scalable. This will be the beginning 
of the move to a personal cloud and we&amp;#8217;ll start by moving our personal 
websites (as well as this one) onto a self-hosting platform.  This platform 
will be something to build on and experiment with over the rest of the year, 
replacing parts of the third-party infrastructure we use today. In the 
meantime, we wish you a great holiday season and look forward to the New 
Year!&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2013/looking-forward-to-2014</link>
                <guid>http://nymote.org/blog/2013/looking-forward-to-2014</guid>
                <pubDate>2013-12-19T20:30:00+00:00</pubDate>
        </item>

        <item>
                <title>Smart TVs that watch you</title>
                <description>
&lt;p&gt;As our devices grow smarter and more connected it&amp;#8217;s reasonable to expect 
that we&amp;#8217;ll get better services and features as a result.  One such device 
that&amp;#8217;s already making its way into our homes is the humble TV.  We already 
have smart devices that &lt;em&gt;connect&lt;/em&gt; to our TVs, such as the AppleTV and 
Google&amp;#8217;s Chromecast device, but the manufacturers themselves are also adding 
more functionality.  However, what these devices are doing is worth a second 
look.&lt;/p&gt;

&lt;p&gt;A recent post by &lt;a href=&quot;http://doctorbeet.blogspot.co.uk&quot;&gt;DoctorBeet&lt;/a&gt;, examines what his LG TV was doing when he 
noticed advertising on the homescreen.  This led him to discover that LG was 
offering a Smart Ad service to advertisers, based on customers&amp;#8217; data.  The 
LG site has since been taken down but apparently &lt;em&gt;&amp;#8220;LG Smart Ad analyses 
users favourite programs, online behaviour, search keywords and other 
information to offer relevant ads to target audiences.&amp;#8221;&lt;/em&gt; Furthermore, there 
was a setting on the TV itself called &amp;#8220;Collection of watching info&amp;#8221;, where 
the default setting was &amp;#8216;ON&amp;#8217;.  All of this seems quite invasive, since the 
TV was purchased outright so it&amp;#8217;s not a case of trading privacy for 
something that&amp;#8217;s free.  You&amp;#8217;d think that turning the collection setting to 
&amp;#8216;OFF&amp;#8217; would largely solve the issue but this story isn&amp;#8217;t that simple.  You 
should &lt;a href=&quot;http://doctorbeet.blogspot.co.uk/2013/11/lg-smart-tvs-logging-usb-filenames-and.html&quot;&gt;read the post in full&lt;/a&gt;, but a brief summary is below.&lt;/p&gt;

&lt;p&gt;DocterBeet turned off the collection setting and then decided to examine his 
internet traffic.  Apparently the viewing data was being &lt;em&gt;regardless&lt;/em&gt; of the 
setting on the TV, which completely breaks user expectations.  As if that 
wasn&amp;#8217;t bad enough, the TV was scanning external USB drives and sending back 
that data too.  Sometimes just the filenames but sometimes all the content 
too.  When LG was contacted about the problems, their response was baffling. 
Essentially, they claimed that DoctorBeet had &lt;em&gt;&amp;#8220;accepted the Terms and 
Conditions on [their] TV&amp;#8221;&lt;/em&gt; and implied there was nothing they could do. 
Since DoctorBeet is a technically savvy customer, he created rules on his 
home router to prevent any further connections to LG&amp;#8217;s computers, while 
ensuring he could still get the software updates.  &lt;/p&gt;

&lt;p&gt;This case highlights a potential trend where devices that we&amp;#8217;ve paid for are 
still attempting to collect user-data for the purpose of advertising.  A 
case of you are &lt;em&gt;both&lt;/em&gt; the customer &lt;em&gt;and&lt;/em&gt; the product. What&amp;#8217;s equally 
concerning is that one technically able customer was able to understand what 
was going on but the majority of users would have been none-the-wiser. &lt;/p&gt;

&lt;p&gt;The next few years are going to be interesting as more news like this breaks 
and people become more aware of how desperate companies are to learn about 
their users.  The irony is that if the customers had a real voice, many of 
them may be willing to trade with the companies and provide them access to 
data-sets, assuming a safe and secure way to do so was available.  We&amp;#8217;re 
working on a platform as part of the &lt;a href=&quot;http://hubofallthings.wordpress.com&quot;&gt;Hub of all Things&lt;/a&gt; project, where 
companies and customers can do exactly this.  There may be other users who 
want to have more control over their home networks so we&amp;#8217;re also looking at 
&lt;a href=&quot;http://homenetworks.ac.uk&quot;&gt;novel ways to allow people to interact and configure home routers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Internet of Things and connected devices have the potential to be as 
ground-breaking as the Web but end-users must also be empowered if we are to 
reap all the benefits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read the full story at: &lt;a href=&quot;http://doctorbeet.blogspot.co.uk/2013/11/lg-smart-tvs-logging-usb-filenames-and.html&quot;&gt;http://doctorbeet.blogspot.co.uk/2013/11/lg-smart-tvs-logging-usb-filenames-and.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2013/smart-tvs-that-watch-you</link>
                <guid>http://nymote.org/blog/2013/smart-tvs-that-watch-you</guid>
                <pubDate>2013-11-19T19:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Using Pinboard to tag interesting links</title>
                <description>
&lt;p&gt;For some time now, I&amp;#8217;ve been collecting links to news articles, products and 
discussions relating to the Internet of Things, Personal Clouds, data 
privacy/ownership and products.  This is a rapidly growing list and there 
are nearly 200 bookmarks already.  Trying to sift through them to find 
something specific is getting difficult and it must be even more difficult 
for anyone else trying to browse the collection.&lt;/p&gt;

&lt;h2 id=&quot;organising-a-collection-of-bookmarks&quot;&gt;Organising a collection of bookmarks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/abirdie/355066859&quot;&gt;&lt;img style=&quot;float:left; margin-right: 15px;&quot; src=&quot;/images/bookmarks.jpg&quot; /&gt;&lt;/a&gt;
After looking around and asking people about social bookmarking sites, I was 
pointed to &lt;a href=&quot;https://pinboard.in&quot;&gt;Pinboard&lt;/a&gt; (&lt;em&gt;thanks, &lt;a href=&quot;http://ulrichatz.com&quot;&gt;Ulrich&lt;/a&gt;!&lt;/em&gt;). This is a simple and 
efficient site that helps you to gather links, tag and comment on them and, 
in my case, make them publicly accessible.  A few days ago I imported all my 
Nymote bookmarks into Pinboard and have been testing it out since then.&lt;br /&gt;
I&amp;#8217;ve been extremely happy with how it works and it&amp;#8217;s dramatically improved 
the workflow for getting the links onto this site.  &lt;/p&gt;

&lt;p&gt;The bookmarklet I added to my browser makes it simple to add new links with 
descriptions and the ability to add links by email has been extremely useful 
when browsing from my phone.  Pinboard also has the ability to generate RSS 
feeds so I&amp;#8217;ve been able to take that feed from Pinboard and completely 
reorganise the &lt;strong&gt;&lt;a href=&quot;\links&quot;&gt;Nymote links page&lt;/a&gt;&lt;/strong&gt;.  It now presents a reverse 
chronological list of all the links so far, together with brief summaries of 
the content.  In order to filter and browse the tags, you&amp;#8217;ll need to visit 
my &lt;a href=&quot;https://pinboard.in/u:amirmc/t:nymote/&quot;&gt;Pinboard page&lt;/a&gt; and I&amp;#8217;ll be going back over the older 
links to add more descriptions.  To stay completely up to date with the 
things I find online, you can even subscribe to my 
&lt;a href=&quot;http://feeds.pinboard.in/rss/u:amirmc/t:nymote/&quot;&gt;nymote-links feed&lt;/a&gt; directly.  If you come across something 
you&amp;#8217;d like me to add, please do &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#109;&amp;#105;&amp;#114;&amp;#064;&amp;#110;&amp;#121;&amp;#109;&amp;#111;&amp;#116;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&amp;#063;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#078;&amp;#101;&amp;#119;&amp;#037;&amp;#050;&amp;#048;&amp;#108;&amp;#105;&amp;#110;&amp;#107;&amp;#037;&amp;#050;&amp;#048;&amp;#116;&amp;#111;&amp;#037;&amp;#050;&amp;#048;&amp;#097;&amp;#100;&amp;#100;&amp;#033;&quot;&gt;send me an email&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;services-box&quot;&gt;
    &lt;a href=&quot;http://nymote.org/atom.xml&quot;&gt;&lt;div style=&quot;float: right; margin-left: 20px;&quot; class=&quot;icon&quot;&gt;
        &lt;span class=&quot;icon-rss&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;### Subscribe to the blog via news feeds&lt;/p&gt;

&lt;p&gt;In addition to the above changes, I&amp;#8217;ve also added links on the website to 
enable people to &lt;a href=&quot;http://nymote.org/atom.xml&quot;&gt;subscribe to the blog&lt;/a&gt; using feed readers.  A 
news feed was always available if you knew the URL (or found it in the 
&lt;a href=&quot;https://github.com/nymote/nymote.github.io&quot;&gt;source code&lt;/a&gt; of the site) but there are now more prominent 
subscribe links on the blog pages. Along with the &lt;a href=&quot;http://eepurl.com/mXYb1&quot;&gt;mailing list&lt;/a&gt;, this 
gives people even more options to keep up with news about Nymote.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2013/using-pinboard-to-tag-interesting-links</link>
                <guid>http://nymote.org/blog/2013/using-pinboard-to-tag-interesting-links</guid>
                <pubDate>2013-10-11T00:30:00+01:00</pubDate>
        </item>

        <item>
                <title>Overview of Mirage</title>
                <description>
&lt;p&gt;Mirage is one of the key components of the Nymote toolstack and this post 
introduces the principles behind it. If you&amp;#8217;re familiar with the using the 
command line, I&amp;#8217;d encourage you to try out the 
&lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;installation instructions&lt;/a&gt; for yourself!&lt;/p&gt;

&lt;h2 id=&quot;what-is-mirage-and-why-is-it-important&quot;&gt;What is Mirage and why is it important?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.berndnaut.nl/images/NimbusNP3web.jpg&quot;&gt;&lt;img style=&quot;float:right; margin-left: 15px;&quot; width=&quot;500&quot; src=&quot;/images/nimbus-np3-smilde.jpg&quot; /&gt;&lt;/a&gt;
Most applications that run in the cloud aren&amp;#8217;t optimised to do so.  They 
inherently carry assumptions about the underlying operating system with 
them, including vulnerabilities and bloat. 
Compartmentalisation of large servers into smaller &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_machine&quot;&gt;virtual machines&lt;/a&gt; has 
enabled many new businesses to get started and achieve scale.  This has been 
great for new services but many of those virtual machines are single-purpose 
and yet they contain largely complete operating systems which themselves run 
applications like web-servers.  This means a large part of the footprint is 
unused and unnecessary, which is both costly and a security risk (due to the 
larger attack surface).&lt;/p&gt;

&lt;p&gt;Mirage represents a new approach where only the necessary components of the 
OS are included and compiled along with the application into a 
&lt;a href=&quot;/docs/2013-asplos-mirage.pdf&quot;&gt;unikernel&lt;/a&gt;.
This results in highly efficient and extremely lean &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_appliance&quot;&gt;appliances&lt;/a&gt;&lt;/em&gt;, with a 
much smaller attack surface.  These appliances can be deployed directly to 
the cloud and embedded devices, with the benefits of reduced costs and 
increased security and scalability.&lt;/p&gt;

&lt;h2 id=&quot;how-does-mirage-work&quot;&gt;How does Mirage work?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.xenproject.org/developers/teams/hypervisor.html&quot;&gt;&lt;img style=&quot;float:left; margin-right: 15px;&quot; width=&quot;300&quot; src=&quot;/images/Xen-Panda-Ecosystem-1-500px.png&quot; /&gt;&lt;/a&gt;
Mirage is a unikernel for constructing secure, high-performance network 
applications across a variety of cloud computing and mobile platforms. It 
works by treating the &lt;a href=&quot;http://www.xenproject.org/developers/teams/hypervisor.html&quot;&gt;Xen hypervisor&lt;/a&gt; as a stable hardware platform, allowing 
us to focus on high-performance protocol implementations without worrying 
about having to support the thousands of device drivers found in a 
traditional OS.&lt;/p&gt;

&lt;p&gt;Code can be developed in a high-level functional programming language (OCaml)
on a desktop OS such as Linux or Mac OSX, and is then compiled into a 
fully-standalone, specialised unikernel. These unikernels run directly 
on Xen Project hypervisor APIs. Since the Xen Project powers most public 
clouds such as &lt;a href=&quot;http://aws.amazon.com/ec2/&quot;&gt;Amazon EC2&lt;/a&gt;, &lt;a href=&quot;http://www.rackspace.com/cloud/&quot;&gt;Rackspace Cloud&lt;/a&gt;, and many others, Mirage 
lets your servers run more cheaply, securely and faster in any Xen Project 
based cloud or hosting service.&lt;/p&gt;

&lt;p&gt;Mirage is based around the OCaml language, with syntax extensions and 
&lt;a href=&quot;https://github.com/mirage&quot;&gt;35+ libraries&lt;/a&gt; which map directly to operating system constructs when being 
compiled for production deployment. As such, Mirage includes clean-slate 
functional implementations of protocols ranging from TCP/IP, DNS, SSH, 
Openflow (switch/controller), HTTP, XMPP and Xen Project inter-VM transports.&lt;/p&gt;

&lt;!--Some of the new applications we are building using Mirage include the 
next-generation Xen Cloud Platform (a widely deployed open-source Xen 
distribution), dubbed [Project Windsor][]. --&gt;

&lt;h2 id=&quot;where-will-mirage-be-useful&quot;&gt;Where will Mirage be useful?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/radnezeoz/7343684238/&quot;&gt;&lt;img style=&quot;float:right; margin-left: 15px;&quot; width=&quot;500&quot; src=&quot;/images/cumulous-cruisin.jpg&quot; /&gt;&lt;/a&gt;
An example of a current Mirage appliance can be seen at 
&lt;a href=&quot;http://openmirage.org&quot;&gt;openmirage.org&lt;/a&gt;, 
which is a completely self-hosted site, deployed on the public cloud and running directly on the Xen Project hypervisor (in this case, on 
Amazon EC2). Such appliances could be auto-configured and deployed directly 
to the public cloud (e.g. Rackspace or Amazon EC2) or pushed to embedded 
devices. There is also 
&lt;a href=&quot;http://decks.openmirage.org&quot;&gt;http://decks.openmirage.org&lt;/a&gt;, where separate 
Mirage unikernels are being used to present slides for conferences.  These 
are both example of how Mirage is working right now and below are examples 
of what we can do in the future.&lt;/p&gt;

&lt;h3 id=&quot;self-scaling-architecture&quot;&gt;Self-scaling architecture&lt;/h3&gt;

&lt;p&gt;We can create auto-scaling web-servers with very small footprints.  These 
would be cheaper to run than current solutions due to the small size but 
they would also be highly elastic.  If a sudden spike in traffic occurs, the 
web-servers can be configured to create and deploy copies of themselves to 
service the demand.  This auto-scaling happens so quickly that an incoming 
connection can trigger the creation of new server and the &lt;em&gt;new server&lt;/em&gt; can 
then handle that request before it times out (which is on the order of 
milliseconds). When the demand dies down again, these web-servers can 
automatically shut themselves down. Since these machines boot fast we can be 
more elastic, raising and lowering capacity to precisely meet demand and 
therefore only spending what we actually need when we really need it.&lt;/p&gt;

&lt;h3 id=&quot;deployment-to-embedded-devices&quot;&gt;Deployment to embedded devices&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/lukew/6171377827/&quot;&gt;&lt;img style=&quot;float:left; margin-right: 15px;&quot; src=&quot;/images/device-love.jpg&quot; /&gt;&lt;/a&gt;
Using Mirage, we can also create appliances that can run on embedded devices.
Such appliances can be deployed into small devices that are scattered 
around your home, for example in plant pots to measure moisture levels to 
chemical sensors 
in your fridge, which tell you exactly what has gone off.  You could access 
the data from these sensors via a web-sever appliance, which is also 
deployed locally in your home on a device like a &lt;a href=&quot;http://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;.&lt;br /&gt;
Installing additional applications into your Raspberry Pi appliance can be a 
a simple 1-click operation, allowing you to share your data or compare with 
others.  Creating a home-based network like this ensures you&amp;#8217;re not affected 
by any upstream connectivity issues and that your data remains within your 
control.  &lt;/p&gt;

&lt;p&gt;This same scenario can be deployed into a enterprise environment where 
sensors around a building can monitor environmental conditions, adjust 
lighting and many other things.  When additional computation is required, 
more appliances can automatically be created on a cloud provider for the 
short duration that they&amp;#8217;re needed.&lt;/p&gt;

&lt;p&gt;Overall, Mirage provides substantial benefits in terms of increased 
efficiency and safety and is ideal for deploying to both the public could 
and embedded devices.  Together with &lt;a href=&quot;/software/signpost&quot;&gt;Signpost&lt;/a&gt; and &lt;a href=&quot;/software/irmin&quot;&gt;Irmin&lt;/a&gt;, Mirage 
forms a core piece of the Nymote toolstack to power the coming wave of 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_of_Things&quot;&gt;Internet of Things devices&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Mirage is primarily supported by &lt;a href=&quot;http://www.horizon.ac.uk&quot;&gt;Horizon Digital Economy Research&lt;/a&gt; - RCUK, and is also an 
&lt;a href=&quot;http://www.xenproject.org/developers/teams/mirage-os.html&quot;&gt;Incubated Project&lt;/a&gt; 
under the umberella of the &lt;a href=&quot;http://www.xenproject.org&quot;&gt;Xen Project&lt;/a&gt;. 
You can find the source code on &lt;a href=&quot;http://github.com/mirage&quot;&gt;GitHub&lt;/a&gt; and more links and
slides on the &lt;a href=&quot;/software/mirage&quot;&gt;Mirage page&lt;/a&gt;.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2013/overview-of-mirage</link>
                <guid>http://nymote.org/blog/2013/overview-of-mirage</guid>
                <pubDate>2013-10-03T13:00:00+01:00</pubDate>
        </item>

        <item>
                <title>IndieWebCamp UK</title>
                <description>
&lt;p&gt;Last weekend I went down to Brighton for IndieWebCamp UK. I first heard 
about Indie Web via a &lt;a href=&quot;http://www.wired.com/wiredenterprise/2013/08/indie-web/&quot;&gt;Wired article&lt;/a&gt; which led me to 
discover &lt;a href=&quot;http://indiewebcamp.com/2013/UK&quot;&gt;IndieWebCamp UK&lt;/a&gt; in Brighton.  The original idea behind Indie 
Web was around people owning their content and creating tools that syndicate 
to elsewhere on the web.  &lt;/p&gt;

&lt;h2 id=&quot;about-indie-web-camp&quot;&gt;About Indie Web Camp&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/images/indiewebcampuk-2013/01-large.png&quot;&gt;&lt;img style=&quot;float:right; margin-left: 15px;&quot; src=&quot;/images/indiewebcampuk-2013/01.jpg&quot; /&gt;&lt;/a&gt;
&amp;gt; What is the IndieWeb?
&amp;gt; 
&amp;gt; We should all own the content we&amp;#8217;re creating, 
&amp;gt; rather than just posting to third-party content silos. 
&amp;gt; Publish on your own domain, and syndicate out to silos.
&amp;gt; This is the basis of the &amp;#8216;Indie Web&amp;#8217; movement. &lt;/p&gt;

&lt;p&gt;The aims are now much wider than this as the discussions on the day covered 
topics from design to peer-to-peer networking and the digital self, all from 
the perspective of individual ownership.  There was an emerging concept of 
&amp;#8216;Indie Data&amp;#8217;, under which all aspects of a user&amp;#8217;s data (and digital self) 
could be discussed.  It was a great event and the goals of Indie Web mirror 
our own.&lt;br /&gt;
&lt;!--I was there for the unconference format on Saturday and below is a summary of the day.--&gt;&lt;/p&gt;

&lt;h2 id=&quot;saturday-unconference&quot;&gt;Saturday unconference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/images/indiewebcampuk-2013/02-large.png&quot;&gt;&lt;img style=&quot;float:left; margin-right: 15px;&quot; src=&quot;/images/indiewebcampuk-2013/02.jpg&quot; /&gt;&lt;/a&gt;
During the morning everyone gave 3 minute introductions about their projects 
and tools.  Lots of people talked about their blogging infrastructure and 
mechanisms for syndicating the information out to twitter and elsewhere.  I 
spoke about the &lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt; toolstack, focusing more on &lt;a href=&quot;/software/signpost&quot;&gt;Signpost&lt;/a&gt; as a 
means of providing resilient connections between an individual&amp;#8217;s devices.&lt;br /&gt;
It would have been great if there was time for a demo of 
&lt;a href=&quot;/software/mirage&quot;&gt;Mirage&lt;/a&gt;, especially creating the self-hosting website, as 
that would fit well with the workflows I saw.  You can run through the 
instructions and &lt;a href=&quot;http://www.openmirage.org/wiki/install&quot;&gt;try for yourself&lt;/a&gt;!  In any case, my talk 
led to discussions later on about how we&amp;#8217;re represented online, and how we 
can gather our data under our control.  For example, Tom and Mike are 
working on &lt;a href=&quot;http://www.keybits.net&quot;&gt;Keybits&lt;/a&gt;, making it simple and easy for people to set up 
personal servers and &lt;a href=&quot;https://twitter.com/aral&quot;&gt;Aral&lt;/a&gt; is working on &lt;a href=&quot;http://aralbalkan.com/notes/codename-prometheus/&quot;&gt;Codename Promethus&lt;/a&gt;, which is 
a user-experience-driven open-source project (he&amp;#8217;ll reveal more himself in 
due course &amp;#8211; but it&amp;#8217;s pretty exciting).  The guys from &lt;a href=&quot;http://www.mailpile.is&quot;&gt;Mailpile&lt;/a&gt; were 
also there, after their hugely successful 
&lt;a href=&quot;http://www.indiegogo.com/projects/mailpile-taking-e-mail-back&quot;&gt;crowdfunding campaign&lt;/a&gt;, and it was great to chat about 
problems and solutions related to how we use email.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/99930774@N08/9712260140/&quot;&gt;&lt;img style=&quot;float:right; margin-left: 15px;&quot; width=&quot;540&quot; src=&quot;/images/brighton-food-fest.jpg&quot; /&gt;&lt;/a&gt;
Lunch was fantastic because we had the 
&lt;a href=&quot;http://brightonfoodfestival.com&quot;&gt;Brighton and Hove food festival&lt;/a&gt; literally on our doorstep. 
There were so many stalls to choose from with food from all over the world. 
At times it felt like the whole town had turned up and there was a great 
atmosphere.  Brighton is definitely a great place.&lt;/p&gt;

&lt;p&gt;Overall, &lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt; as a toolstack fits extremely well with the projects I 
saw because it deals with some of the fundamental problems people need to 
solve.  For the case of Indie Web participants that meant dealing with 
identity and authentication (&lt;a href=&quot;/software/signpost&quot;&gt;Signpost&lt;/a&gt;) as well as connectivity 
(&lt;a href=&quot;/software/signpost&quot;&gt;Signpost&lt;/a&gt; again) and deployment (&lt;a href=&quot;/software/mirage&quot;&gt;Mirage&lt;/a&gt;).  We did briefly discuss 
immutable datastores and sync problems, where &lt;a href=&quot;/software/irmin&quot;&gt;Irmin&lt;/a&gt; is relevant. 
I&amp;#8217;ve collected some of these projects on a &lt;a href=&quot;/links&quot;&gt;links page&lt;/a&gt;, which I&amp;#8217;ll be 
adding to over time.  Please do &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#109;&amp;#105;&amp;#114;&amp;#064;&amp;#110;&amp;#121;&amp;#109;&amp;#111;&amp;#116;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&amp;#063;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#078;&amp;#101;&amp;#119;&amp;#037;&amp;#050;&amp;#048;&amp;#108;&amp;#105;&amp;#110;&amp;#107;&amp;#037;&amp;#050;&amp;#048;&amp;#116;&amp;#111;&amp;#037;&amp;#050;&amp;#048;&amp;#099;&amp;#111;&amp;#110;&amp;#115;&amp;#105;&amp;#100;&amp;#101;&amp;#114;&amp;#033;&quot;&gt;send me&lt;/a&gt; any interesting things 
which should go on that list.&lt;/p&gt;

&lt;p&gt;On a personal note, it was great to meet &lt;a href=&quot;https://twitter.com/invisiblecomma&quot;&gt;Alf&lt;/a&gt; for the first time who is 
the guy behind &lt;a href=&quot;http://www.hubmed.org&quot;&gt;HubMed&lt;/a&gt;, an alternative interface to &lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pubmed&quot;&gt;PubMed&lt;/a&gt; (a 
biomedical academic papers database).  I used HubMed while writing my PhD 
Thesis because it output BibTex for me and I remember emailing Alf with bug 
reports way back in January 2006.  The site was so useful that I&amp;#8217;ve never 
forgotten it and it was a pleasure to be able to thank him directly (albeit 
7 years later).&lt;/p&gt;

&lt;p&gt;Below are some quick notes I took during the sessions I attended.&lt;/p&gt;

&lt;h3 id=&quot;collaborative-real-time-data&quot;&gt;Collaborative real-time data&lt;/h3&gt;

&lt;p&gt;  &amp;lt;iframe style=&quot;float:right; margin-left: 15px; margin-bottom: 15px&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube-nocookie.com/embed/NSTZ4mIv_wk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&amp;gt;Aral on Woot&amp;lt;/iframe&amp;gt;
Specific things mentioned include Woot (see video below), &lt;a href=&quot;http://www.webrtc.org&quot;&gt;WebRTC&lt;/a&gt;, 
&lt;a href=&quot;http://camlistore.org&quot;&gt;Camlistore&lt;/a&gt; and &lt;a href=&quot;https://peercdn.com&quot;&gt;PeerCDN&lt;/a&gt;.  Also some brief discussion about 
peer-to-peer and how it can benefit companies, with the example of Spotify. 
Apparently 80% of plays on Spotify come from only 12% of their catalogue and 
they use P2P technology to get content to users faster and reduce their own 
bandwidth costs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead of downloading a single song file from its own server to you, 
Spotify searches for copies of the song wherever it can find them, 
including the computers of other Spotify users.&lt;br /&gt;
&lt;em&gt;(from &lt;a href=&quot;http://www.npr.org/blogs/therecord/2011/11/09/141594727/how-spotify-works-pay-the-majors-use-p2p-technology&quot;&gt;NPR&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;user-experience-design&quot;&gt;User Experience Design&lt;/h3&gt;

&lt;p&gt;Aral spoke about user experience design. Open-source has had a massive 
positive impact for other developers and industry but very few projects 
directly make it to mainstream consumer adoption.  Believes that this is 
because design is treated as something you put on afterwards, rather than a 
core principle.  &lt;/p&gt;

&lt;p&gt;Essentially, people still perceive a difference between design and 
development where there shouldn&amp;#8217;t be one.  An analogy would be developers 
working in isolation from QA.  Designers need to understand developers and 
developers should incorporate design.  Introduced &lt;a href=&quot;http://aralbalkan.com/notes/codename-prometheus/&quot;&gt;Codename Promethus&lt;/a&gt; and 
had a roundtable discussion about design and development practices.&lt;/p&gt;

&lt;p&gt;During the discussion, Aral raised an interesting point that &amp;#8216;scratching 
your own itch&amp;#8217; only solves problems for people who have the same itch (i.e 
people like yourselves, other developers).  To reach mainstream adoption, 
developers and designers need to think &lt;em&gt;beyond&lt;/em&gt; their own problems.&lt;/p&gt;

&lt;h3 id=&quot;privacy-and-tools-for-the-future&quot;&gt;Privacy and tools for the future&lt;/h3&gt;

&lt;p&gt;An open and wide ranging discussion around privacy online, secure 
communications and responsibility.  One of the questions posed was whether 
developers have a responsibility for security and safety regarding the 
software they create.  The general feeling was that yes, they do but an 
analogy about food regulations was also made and the role of government was 
brought up.&lt;/p&gt;

&lt;p&gt;There were some practical discussions about problems of key exchange and 
identity online as well as how people can use their domain as an identifier. 
These are areas where &lt;a href=&quot;/software/signpost&quot;&gt;Signpost&lt;/a&gt; will help.&lt;/p&gt;

&lt;h3 id=&quot;movie-terms-and-conditions-may-apply&quot;&gt;Movie: Terms and Conditions May Apply&lt;/h3&gt;

&lt;p&gt;  &amp;lt;iframe style=&quot;float:left; margin-right: 15px; margin-bottom: 15px&quot; src=&quot;//player.vimeo.com/video/57182041?byline=0&amp;amp;portrait=0&quot; width=&quot;540&quot; height=&quot;304&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; allowfullscreen=&quot;true&quot;&amp;gt;tacma vimeo trailer&amp;lt;/iframe&amp;gt;
To wrap up the day we had the first UK screening of 
&lt;a href=&quot;http://tacma.net&quot;&gt;Terms and Conditions May Apply&lt;/a&gt;.  This was a fascinating look at how 
the interests of centralised companies diverge from what is best for the end 
users and how incremental changes over time have led us to a world where we 
routinely hand over ongoing access to our personal lives.  It&amp;#8217;s a great 
movie to show people who may not understand the problem but at the same time 
it doesn&amp;#8217;t do enough at the end to demonstrate ways out of the current 
situation.&lt;/p&gt;

&lt;p&gt;You can find reviews of the movie on &lt;a href=&quot;http://www.imdb.com/title/tt2084953/&quot;&gt;IMDB&lt;/a&gt; and the trailer is above.  If 
you happen to be in Cambridge UK and would like me to set up a screening of 
the movie, please do &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#109;&amp;#105;&amp;#114;&amp;#064;&amp;#110;&amp;#121;&amp;#109;&amp;#111;&amp;#116;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&amp;#063;&amp;#038;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#084;&amp;#101;&amp;#114;&amp;#109;&amp;#115;&amp;#037;&amp;#050;&amp;#048;&amp;#097;&amp;#110;&amp;#100;&amp;#037;&amp;#050;&amp;#048;&amp;#067;&amp;#111;&amp;#110;&amp;#100;&amp;#105;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#115;&amp;#037;&amp;#050;&amp;#048;&amp;#109;&amp;#111;&amp;#118;&amp;#105;&amp;#101;&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2013/indiewebcamp-uk</link>
                <guid>http://nymote.org/blog/2013/indiewebcamp-uk</guid>
                <pubDate>2013-09-12T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Introducing Nymote</title>
                <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt;&lt;/strong&gt; is a set of tools and software &lt;a href=&quot;/#infrastructure&quot;&gt;infrastructure&lt;/a&gt;, created 
from the ground up, to provide end-users with life-long control of their 
networks and personal data.  Think of it as the &lt;a href=&quot;http://en.wikipedia.org/wiki/Solution_stack&quot;&gt;toolstack&lt;/a&gt; to recapture 
the original vision of a resilient, decentralised Internet.   This site 
brings together the open-source technology we’re building and describes what 
we’re working towards — infrastructure that empowers users and 
organisations to regain control over their digital data.&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-matters&quot;&gt;Infrastructure matters&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/suzumenonamida/8206148949/&quot;&gt;&lt;img style=&quot;float:left; margin-right: 15px;&quot; src=&quot;/images/higashi-osaka-junction.jpg&quot; /&gt;&lt;/a&gt;
The Internet has become such a huge part of our daily lives to the extent 
that it’s difficult to imagine a world without information and connectivity 
(literally) at your fingertips. Collaboration is easier, communication 
simpler and generally work is more productive than it’s ever been.  For 
example, companies such as Apple, Google and Microsoft provide services that 
manage our emails, while reducing spam, and seamlessly keep our mobile 
devices in sync for us. Services such as Dropbox and Google Drive make the 
process of collaborating in teams trivially simple.  Social services like 
Facebook and Twitter make it fun and easy to keep up to date with friends, 
while LinkedIn helps you to manage your professional persona and visualise 
your network.  All of these companies are successful because they provide 
something of value to their users.  &lt;/p&gt;

&lt;p&gt;However, we’ve also made sacrifices in order to achieve these gains, in many 
cases without fully comprehending the trade-offs.  By adopting large 
centralised services we’ve made an implicit trade that in exchange for 
something useful, we will share our habits and data with them. In doing so 
we’ve empowered Internet behemoths while simultaneously reducing our ability 
to influence them. We are at the behest of &lt;a href=&quot;http://www.telegraph.co.uk/technology/social-media/9780565/Facebook-terms-and-conditions-why-you-dont-own-your-online-life.html&quot;&gt;ever&lt;/a&gt;-&lt;a href=&quot;http://consumerist.com/2009/02/15/facebooks-new-terms-of-service-we-can-do-anything-we-want-with-your-content-forever&quot;&gt;changing&lt;/a&gt; 
&lt;a href=&quot;http://bits.blogs.nytimes.com/2012/12/17/what-instagrams-new-terms-of-service-mean-for-you/?_r=0&quot;&gt;Terms&lt;/a&gt; of &lt;a href=&quot;http://mattmckeon.com/facebook-privacy/&quot;&gt;Service&lt;/a&gt;, which are 
&lt;a href=&quot;http://tosdr.org&quot;&gt;not written in the users’ interest&lt;/a&gt;. We trust services to secure our 
data but &lt;a href=&quot;http://venturebeat.com/2012/08/01/dropbox-has-become-problem-child-of-cloud-security/&quot;&gt;repeated breaches&lt;/a&gt; undermine that trust. 
Services that we come to depend on are &lt;a href=&quot;http://gigaom.com/2013/07/03/google-readers-shutdown-the-rise-of-walled-gardens-and-the-future-of-the-open-web/&quot;&gt;shut down&lt;/a&gt;, 
forcing us to look elsewhere and adapt our habits.  We are at the the point 
where so much of our lives are in these silos that 
&lt;a href=&quot;http://www.theguardian.com/world/2013/jun/06/us-tech-giants-nsa-data&quot;&gt;governments demand access to them&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float:right; margin-left: 15px;&quot; src=&quot;/images/iot-devices.png&quot; /&gt;
In addition to the above, we have entered an era where more of our 
interactions with the world are through mobile devices, like smartphones.&lt;br /&gt;
This trend is set to continue and has been described as the 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Post-PC_era&quot;&gt;Post-PC era&lt;/a&gt;, the &lt;a href=&quot;http://academy.bcs.org/content/2012-lecture-0&quot;&gt;5th wave of computing&lt;/a&gt; and the 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_of_Things&quot;&gt;Internet of Things&lt;/a&gt;.  What they all have in common is the idea of 
remote devices recording data and performing useful services for us, like 
encouraging us to be more &lt;a href=&quot;http://allthingsd.com/20130715/fitbit-flex-vs-jawbone-up-and-more-a-wearables-comparison/&quot;&gt;physically active&lt;/a&gt; or 
&lt;a href=&quot;http://www.usa.philips.com/c/app-enhanced-accessories/double-pack-m100d_37/prd/en/&quot;&gt;monitoring our homes&lt;/a&gt;.  This is an exciting area and is 
reminiscent of the early days of the World Wide Web.  There are 
&lt;a href=&quot;http://www.kickstarter.com/projects/cloud-guys/plug-the-brain-of-your-devices&quot;&gt;highly successful&lt;/a&gt; crowd-funded &lt;a href=&quot;http://www.indiegogo.com/projects/canary-the-first-smart-home-security-device-for-everyone&quot;&gt;projects&lt;/a&gt; that 
demonstrate the demand from users for new products and services.  As this 
space evolves we are faced with a choice.  One option is to continue along 
the current path of increasingly centralised services, providing access to 
even more intimate aspects of our lives, including health and medical data. 
We’ve seen both the benefits and costs of this approach with the way things 
are now.  An alternative is to create more decentralised systems, which can 
provide the same benefits but with the user in control at the centre of 
their network of devices.  &lt;/p&gt;

&lt;p&gt;As things stand, we are fundamentally limited by the current system unless 
we can create decentralised alternatives that compete. Many of the services 
we enjoy today require a constant connection to the Internet in order to be 
useful. This is becoming more important as the current wave of Internet of 
Things devices find their way into our homes, with each of them tethered to 
a new wave of centralised services and any interruption in power or 
bandwidth having tangible effects on our lives.  The one truism in depending 
on other people’s services is that they will change or disappear, so 
decentralised solutions are &lt;em&gt;easier&lt;/em&gt; in the long term as &lt;em&gt;users&lt;/em&gt; can control 
when they change or update things.  Such systems allow users to maintain the 
benefits of a networked world as well as achieve &lt;em&gt;life-long control&lt;/em&gt; of 
their data.  Just as the current incarnation of the Internet is built on a 
range of open-source technologies, we need a set of robust tools that allow 
the developers of the future to build distributed systems and services that 
empower users.  &lt;/p&gt;

&lt;p&gt;This is the mission of the Nymote toolstack. &lt;strong&gt;To enable the creation 
of resilient decentralised systems that incorporate privacy from the ground 
up so that users retain control of their networks and data&lt;/strong&gt;. Nymote 
ensures that promises of “your data is safe with us” are underpinned by a 
technological foundation, which reduces the scope for human error and makes 
it easy to build scalable systems where users decide when to add features or 
upgrade.  &lt;/p&gt;

&lt;h2 id=&quot;open-source-building-blocks&quot;&gt;Open-source building blocks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/jezpage/4990873353/&quot;&gt;&lt;img style=&quot;float:right&quot; src=&quot;/images/lego-blocks.jpg&quot; /&gt;&lt;/a&gt;
We’re starting with fundamental &lt;a href=&quot;/#infrastructure&quot;&gt;infrastructure&lt;/a&gt; to solve the problems 
around &lt;a href=&quot;/software/mirage&quot;&gt;operating systems&lt;/a&gt; for the future, &lt;a href=&quot;/software/signpost&quot;&gt;identity&lt;/a&gt; for 
users and devices and &lt;a href=&quot;/software/irmin&quot;&gt;data-persistence&lt;/a&gt; across those devices.&lt;/p&gt;

&lt;p&gt;We began work on these issues four years ago under the umbrella of the 
&lt;a href=&quot;http://www.horizon.ac.uk&quot;&gt;Horizon Digital Economy programme&lt;/a&gt;, at Cambridge University and 
Nottingham University.  As a result many &lt;a href=&quot;/#about&quot;&gt;contributors&lt;/a&gt; have worked 
on these tools and published a number of &lt;a href=&quot;/docs&quot;&gt;papers&lt;/a&gt;.  In the coming weeks we 
will introduce you to each of these key technology pieces, which together 
form a new toolstack for the personal Internet. In the next post, we’ll 
explain more about &lt;strong&gt;&lt;a href=&quot;/software/mirage&quot;&gt;Mirage&lt;/a&gt;&lt;/strong&gt;, how it fits into the overall stack and 
deals with the problems of managing your own infrastructure.  Mirage takes a 
clean-slate approach to the &lt;em&gt;operating system&lt;/em&gt;, with a view to whole-system 
optimisation and use on embedded devices.  It deals with issues of how to 
deploy applications and manage complex infrastructure by creating custom 
‘appliances’, which can be run in a wide variety of environments.  If you’d 
like to read more about it in advance, you can check out the self-hosted 
&lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage website&lt;/a&gt;, read the &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;award-winning paper&lt;/a&gt;, 
presented at &lt;a href=&quot;http://asplos13.rice.edu/programme/&quot;&gt;ASPLOS 2013&lt;/a&gt;, and the earlier 
&lt;a href=&quot;http://anil.recoil.org/papers/2010-hotcloud-lamp.pdf&quot;&gt;HotCloud Paper&lt;/a&gt;.  There are also &lt;a href=&quot;http://www.slideshare.net/amirmc/mirage-extreme-specialization-of-cloud-appliances-oscon-2013&quot;&gt;slides&lt;/a&gt; 
presented at &lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;OSCON&lt;/a&gt; this year and a &lt;a href=&quot;http://vimeo.com/57412215&quot;&gt;video&lt;/a&gt; from 
&lt;a href=&quot;http://www-archive.xenproject.org/xensummit/xs12na_talks/xensummit.html&quot;&gt;XenSummit&lt;/a&gt;.  You can try it out for yourself by following the 
&lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;installation instructions&lt;/a&gt; and looking through the 35+ 
repos on &lt;a href=&quot;https://github.com/mirage&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following this, we will discuss &lt;strong&gt;&lt;a href=&quot;/software/signpost&quot;&gt;Signpost&lt;/a&gt;&lt;/strong&gt;, which deals with the 
growing problems around &lt;em&gt;identity&lt;/em&gt; and returns the &lt;em&gt;end-to-end principle&lt;/em&gt; of 
connectivity to our devices.  It answers the question of ‘who are you?’ on 
the Internet and provides users with the mechanisms needed to create peer-to-
peer connections between their devices.  Creating networks of devices this 
way increases their resilience and was one of the founding principles of the 
Internet.  If you’d like to read ahead, you can look over our recent 
&lt;a href=&quot;/docs/2013-foci-signposts.pdf&quot;&gt;USENIX FOCI paper&lt;/a&gt;, where we describe the architecture and scenarios.&lt;br /&gt;
There are also &lt;a href=&quot;/docs/2012-signpost-poster-a4.pdf&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;/docs/2012-sigcomm-signposts-poster.pdf&quot;&gt;posters&lt;/a&gt; that summarise the 
approach.  &lt;/p&gt;

&lt;p&gt;Finally, we will cover &lt;strong&gt;&lt;a href=&quot;/software/irmin&quot;&gt;Irmin&lt;/a&gt;&lt;/strong&gt;, which rethinks how we *persist data
* based on the principles of version control systems such as Git (or 
historically, &lt;a href=&quot;http://pdos.csail.mit.edu/6.824/papers/bayou-conflicts.ps&quot;&gt;Bayou&lt;/a&gt;).  Irmin incorporates provenance and sync and 
solves the problems of how all a user’s devices coordinate and remain 
synchronised with each other, and how that data is seamlessly backed up and 
encrypted to prevent third-party snooping. This is increasingly important as 
the number of connected devices continues to grow.&lt;/p&gt;

&lt;p&gt;The emerging tools form the bedrock on which anyone can build robust and 
scalable applications.  Applications that provide all the great things we’re 
used to with the additional benefits of resilience, ownership and privacy 
that come with decentralised networks.&lt;/p&gt;

&lt;p&gt;To keep up to date with our posts, sign up to the 
&lt;a href=&quot;http://eepurl.com/mXYb1&quot;&gt;Nymote mailing list&lt;/a&gt;.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2013/introducing-nymote</link>
                <guid>http://nymote.org/blog/2013/introducing-nymote</guid>
                <pubDate>2013-09-02T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Frictionless sharing could erode rights</title>
                <description>&lt;!-- Frictionless sharing could erode rights --&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/42787205@N00/4477454044/&quot; title=&quot;US Constitution by Mark Rasmussen, on Flickr&quot;&gt;&lt;img src=&quot;http://farm5.staticflickr.com/4069/4477454044_6f8b33c8ff_m.jpg&quot; width=&quot;159&quot; height=&quot;240&quot; align=&quot;right&quot; hspace=&quot;10&quot; vspace=&quot;10&quot; alt=&quot;US Constitution&quot; /&gt;&lt;/a&gt;
As services become ‘social’ the ability to seamlessly share things with your colleagues and friends becomes widespread.  For example, Facebook allows users to connect their music services and share what they’re listening to with their friends.&lt;/p&gt;

&lt;p&gt;In general, this type of sharing is considered largely innocuous, unless you count those occasions where your friends catch you listening to something embarrassing (though some services do offer a ‘private listening’ mode).  However, it seems that users who take advantage of this kind of frictionless sharing might inadvertently be eroding their rights.  At least in the USA.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&quot;http://wakeforestlawreview.com/reading-over-your-shoulder-social-readers-and-privacy-law&quot;&gt;article in a student law journal&lt;/a&gt; makes some intriguing points about ubiquitous sharing, privacy law and social readers (which automatically share what you’re reading online).  You may feel that sharing individual reading items is probably of little consequence but as all the major social networks have demonstrated, pieces of information can combine into valuable datasets. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… reading choices that seem innocuous to you can cumulatively be
indicative of patterns, intent, or allegiances …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A fact already known to the American Library Association, who have been advocates of reader privacy since since 1939. &lt;/p&gt;

&lt;p&gt;The question of rights arises when you consider what information the government can collect about you.  The &lt;a href=&quot;http://en.wikipedia.org/wiki/Fourth_Amendment_to_the_United_States_Constitution&quot;&gt;Fourth Amendment&lt;/a&gt; of the US Constitution guards against unreasonable searches and seizures and also relates to the “reasonable expectation of privacy”.  It’s this expectation of privacy where the issues comes about.&lt;/p&gt;

&lt;p&gt;In cases where the Fourth Amendment applies, the Supreme Court may need to decide what’s reasonable and whether warrants are required before the government can collect information.  The fact that ‘expectations’ are involved necessarily means that cultural norms play a role in such decisions. If courts believe that sharing information through social networks with hundreds of ‘friends’ reduces the expectation of privacy, then warrants would no longer be required.  In addition, law enforcement could argue that content was shared with the platform itself, thus no longer considered private. This is where individual rights begin to erode.&lt;/p&gt;

&lt;p&gt;Overall, this is another indication that technology and behaviour are evolving much faster than the judicial process.  People will still share articles and music choices but this shouldn’t imply that such items are de-facto considered as public.  &lt;/p&gt;

&lt;p&gt;Although the above refers to the US legal system, the discussion is still relevant for the UK.  As our lives grow to include more digital interactions, the legal framework we operate in needs to adapt.  Both to afford protection for individuals and also provide due process for law enforcement.  &lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2012/erosion-of-rights-via-sharing</link>
                <guid>http://nymote.org/blog/2012/erosion-of-rights-via-sharing</guid>
                <pubDate>2012-03-16T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Friend recommendations and Address Book Privacy</title>
                <description>&lt;!-- # Friend recommendations and address book privacy --&gt;

&lt;p&gt;In the last couple of weeks another news story about privacy flared-up, gathered some momentum and appears to have died down.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/moonbindery/3312836664/&quot; title=&quot;Handbound address book. green fern cover by Barbara Simler, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3641/3312836664_ef8e302412_m.jpg&quot; width=&quot;240&quot; height=&quot;232&quot; align=&quot;right&quot; hspace=&quot;10&quot; vspace=&quot;10&quot; alt=&quot;Handbound address book. green fern cover&quot; /&gt;&lt;/a&gt;
The story was about how Path, a social networking app for the iPhone, was silently copying users’ address books to its servers.  &lt;em&gt;How&lt;/em&gt; it was discovered probably added some fuel to the story, since it involved a developer running a proxy and noticing what kind of information was being sent back and forth.  The headline was that the entire address book was sent from the phone to Path’s servers.  There was no indication in Path’s privacy policy that they collected information in this way (whether anyone actually &lt;em&gt;reads&lt;/em&gt; such policies is a topic for another time).  You can follow the unfolding events in the rough timeline below.&lt;/p&gt;

&lt;p&gt;The justification for needing the address book data is to improve friend recommendations.  For example, Alice joins a service and by accessing her address book, the service realises she has Bob’s contact details.  Since Bob is already a member, the service can suggest that they connect.  This ‘feature’ is commonplace in almost every social networking application.  The issue with Path was that it occurred without users’ explicit consent and that the data was then stored on their servers.  The CEO even commented that it was “industry best practice”.&lt;/p&gt;

&lt;p&gt;It’s this last comment that is concerning.  Mostly because it’s true.&lt;/p&gt;

&lt;p&gt;Path wasn’t alone in quietly scraping users’ data.  Although they didn’t suffer the same backlash, sites like Instagram, Twitter, Foursquare and others were also taking copies of users’ address books. All without the users’ explicit knowledge.  &lt;/p&gt;

&lt;p&gt;It appears that in the race to deliver excellent, well-designed user experiences, the simple act of &lt;em&gt;informing users what you’re doing&lt;/em&gt; with their data is completely overlooked.  Perhaps it’s one dialog box too far for the developers?  &lt;/p&gt;

&lt;p&gt;The surprising thing that’s come out of this isn’t only that data-copying is so prevalent but the attitude that it’s somehow Apple’s responsibility.  Since Apple explicitly didn’t lock-down address book access, it must be acceptable to do whatever you want with it.  Apple may be at fault for allowing unfettered access but their guidelines do state that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Para 17.1 - Apps cannot transmit data about a user without obtaining the
user’s prior permission and providing the user with access to information
about how and where the data will be used&lt;/p&gt;

  &lt;p&gt;Para 17.2 - Apps that require users to share personal information, such as
email address and date of birth, in order to function will be rejected&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The meaning of “data about a user” could be considered a little ambiguous and this viewpoint also seems to be shared by two US Congressmen, who promptly sent a letter to Apple asking for clarification on data access.&lt;/p&gt;

&lt;p&gt;In general, I find the annoyance directed at Apple to be counter-productive. Despite the seemingly failed app approval process, it’s still the social networks who wrote the code to copy data, &lt;em&gt;without user prompting&lt;/em&gt;.  Claims that it’s Apple’s fault for ‘letting them get away with it’ seem to be missing the point.  That those networks should hold themselves to higher standards.  &lt;/p&gt;

&lt;p&gt;Each of these ‘privacy-leak’ stories seem to be short-lived but the growing frequency indicates that control over &lt;a href=&quot;http://perscon.net/overview/&quot;&gt;personal data&lt;/a&gt; and awareness of your ‘&lt;a href=&quot;http://www.horizon.ac.uk/Horizon-Research&quot;&gt;lifelong digital footprint&lt;/a&gt;’ is becoming a more visible topic.  As well it should be.&lt;/p&gt;

&lt;h3 id=&quot;rough-timeline-of-events&quot;&gt;Rough timeline of events&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[8 Feb] - Arun Thanmpi &lt;a href=&quot;http://mclov.in/2012/02/08/path-uploads-your-entire-address-book-to-their-servers.html&quot;&gt;writes about&lt;/a&gt; the exact &lt;code&gt;POST&lt;/code&gt; request which sends his entire address book to Path&lt;/li&gt;
  &lt;li&gt;[8 Feb] - Path CEO responds to comments on Thanmpi’s blog post, and mentions that this behaviour is &lt;a href=&quot;http://mclov.in/2012/02/08/path-uploads-your-entire-address-book-to-their-servers.html#comment-432242293&quot;&gt;“Industry best practice”&lt;/a&gt;, among other things&lt;/li&gt;
  &lt;li&gt;[8 Feb] - Another developer &lt;a href=&quot;http://dcurt.is/stealing-your-address-book&quot;&gt;confirms&lt;/a&gt; that such behaviour is commonplace, but believes Apple is to blame&lt;/li&gt;
  &lt;li&gt;[9 Feb] - Path CEO &lt;a href=&quot;http://blog.path.com/post/17274932484/we-are-sorry&quot;&gt;apologises on their blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[12 Feb] - &lt;a href=&quot;http://bits.blogs.nytimes.com/2012/02/12/disruptions-so-many-apologies-so-much-data-mining/&quot;&gt;NY Times article&lt;/a&gt; about the sensitivity of address book data&lt;/li&gt;
  &lt;li&gt;[14 Feb] - &lt;a href=&quot;http://venturebeat.com/2012/02/14/iphone-address-book/&quot;&gt;Venture Beat article&lt;/a&gt; mentioning other services that transmit address book data, including in plain-text&lt;/li&gt;
  &lt;li&gt;[15 Feb] - &lt;a href=&quot;http://thenextweb.com/apple/2012/02/15/congress-sends-letter-to-apple-questioning-the-path-debacle-developer-data-access/&quot;&gt;Congressmen write to Apple&lt;/a&gt; with several questions about Apple policies. &lt;/li&gt;
  &lt;li&gt;[15 Feb] - Apple makes a statement that &lt;a href=&quot;http://allthingsd.com/20120215/apple-app-access-to-contact-data-will-require-explicit-user-permission/&quot;&gt;“any app wishing to access contact data will require explicit user approval”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[22 Feb] - California Attorney General brings major tech vendors together to ensure &lt;a href=&quot;http://techcrunch.com/2012/02/22/apple-google-and-others-agree-to-mobile-app-privacy-policy-guidelines/&quot;&gt;all mobile apps come with a privacy policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ### Links --&gt;

</description>
                <link>http://nymote.org/blog/2012/friend-recommendations-and-address-book-privacy</link>
                <guid>http://nymote.org/blog/2012/friend-recommendations-and-address-book-privacy</guid>
                <pubDate>2012-02-23T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Connected devices, web services and Signpost</title>
                <description>&lt;h2 id=&quot;connected-devices-are-here&quot;&gt;Connected devices are here&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/craigjewell/3375525952/&quot; title=&quot;Antique Doorbell Button on a Sandstone Building by Craig Jewell Photography, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3618/3375525952_ee8b4820c9_m.jpg&quot; width=&quot;161&quot; height=&quot;240&quot; align=&quot;right&quot; hspace=&quot;10&quot; vspace=&quot;10&quot; alt=&quot;Antique Doorbell Button on a Sandstone Building&quot; /&gt;&lt;/a&gt; 
The number of internet-enabled devices is increasing and mobile phones only represent one category.  Other types of ‘enabled’ devices can be made quite cheaply, contain a multitude of sensors and be situated almost anywhere.  For example, there are a couple of projects on Kickstarter that promise small boxes with a variety of sensors and even actuators, that can be used for a variety of purposes (see &lt;a href=&quot;http://www.kickstarter.com/projects/supermechanical/twine-listen-to-your-world-talk-to-the-internet&quot;&gt;Twine&lt;/a&gt; and &lt;a href=&quot;http://ninjablocks.com/&quot;&gt;Ninja Blocks&lt;/a&gt;).  The fact that these projects surpassed their funding goals so quickly and spectacularly indicates how excited people are about the possibilities of smart sensors and connected devices.  Commercial products also exist, such as the &lt;a href=&quot;http://www.nest.com&quot;&gt;Nest thermostat&lt;/a&gt;, which communicates with a cloud-based service to regulate the temperature in the home.&lt;/p&gt;

&lt;p&gt;You can easily imagine many uses for such linked-sensor networks.  One example might be a security and access system for your home.  For example, imagine that you have a camera attached to your doorbell, which can send a video-feed directly to your smart-phone at work.  You could then talk to the postman who’s trying to deliver a parcel and make sure he leaves it with people at No.3 or No.10 (people you actually know), and definitely &lt;em&gt;not&lt;/em&gt; with the guy at No.1 (who you’ve never got on with).  Perhaps you could also control the lock and let a trusted friend in if they’ve arrived while you’re still on your way home.  The possibilities are only limited by the sensors, actuators and people’s imaginations.&lt;/p&gt;

&lt;p&gt;The key point about these types of devices is that they’re ‘&lt;em&gt;connected&lt;/em&gt;’, which usually means ‘&lt;em&gt;connected-to-the-internet&lt;/em&gt;’.  The implicit message is that they’re linked to some kind of centralised service but most people don’t delve into what that actually means.&lt;/p&gt;

&lt;h2 id=&quot;all-your-device-are-belong-to-us--&quot;&gt;All your device are belong to us … ?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/katodog/4411945975/&quot; title=&quot;The Old Ball and Chain by Ed Durbin (Katodog), on Flickr&quot;&gt;&lt;img src=&quot;http://farm5.staticflickr.com/4003/4411945975_142f8282ed.jpg&quot; width=&quot;240&quot; height=&quot;160&quot; align=&quot;left&quot; hspace=&quot;10&quot; vspace=&quot;10&quot; alt=&quot;The Old Ball and Chain&quot; /&gt;&lt;/a&gt;
Something common to all the rhetoric about connected devices (phones included) are references to cloud-based services.  In fact, there’s a surprising &lt;em&gt;lack&lt;/em&gt; of discussion about this aspect.  It’s almost taken for granted that such devices will need to ‘dial home’ to achieve anything useful.  ‘Home’ is typically a third-party service to which users are granted access (possibly as a subscription).  It’s a little lax to discuss the ‘internet-of-things’ without also mentioning the centralised services that may underlie it.  &lt;/p&gt;

&lt;p&gt;Nikesh Arora of Google recently mentioned that &lt;a href=&quot;https://plus.google.com/104376123433741873548/posts/4RcwiHbS7ME&quot;&gt;“Consumers want a divergence of devices but a convergence of services”&lt;/a&gt;.  It’s safe to assume that Google would like to be a point of convergence and have begun to position themselves in this way*. Arora, like many others, makes the implicit assumption that cloud-based services will provide the connectivity between devices.  Specifically, that these web-based services will act to host, co-ordinate and route data from whichever devices are authenticated with them.  &lt;/p&gt;

&lt;p&gt;In all the excitement, what &lt;em&gt;isn’t&lt;/em&gt; really discussed is the increasing amount of personal data that would have to be shared with such centralised services (of course, they would all claim that data security is paramount for them).  Something to consider is whether the organisations even &lt;em&gt;need&lt;/em&gt; to hold such information at all.  For some companies, there may be a clear, strategic desire to collate and analyse user data (e.g Google is adept at monetising what it learns from users).  However, in other cases, the back-end service may only exist to solve the problem of connectivity.  Put bluntly, it’s difficult to get all your devices to talk to each other but much more straightforward to get them talking to one central point on the internet.  For example, your phone can usually ‘find and connect’ to the internet, but it’s a lot more complicated if a device needs to ‘find and connect’ to your phone.  &lt;/p&gt;

&lt;p&gt;If a mechanism existed to allow devices to quickly and efficiently make direct connections with each-other, then perhaps many of the coming services could focus on the value-adding features, instead of how to get data from device A (my doorbell camera) to device B (my smart-phone screen).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://perscon.net/overview/signpost.html&quot;&gt;Signpost&lt;/a&gt; addresses the difficult yet &lt;strong&gt;fundamental problem&lt;/strong&gt; for properly enabling the ‘internet-of-things’.  That of creating robust, ad-hoc, private connections between devices.&lt;/p&gt;

&lt;h2 id=&quot;signpost-enables-truly-connected-devices&quot;&gt;Signpost enables truly connected devices&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/heavytpro70/3373700465/&quot; title=&quot;Tin cans and string by heavytpro70, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3456/3373700465_2e2863f2cb.jpg&quot; width=&quot;236&quot; height=&quot;240&quot; align=&quot;right&quot; hspace=&quot;10&quot; vspace=&quot;10&quot; alt=&quot;Tin cans and string&quot; /&gt;&lt;/a&gt;
Signpost enables devices to create bi-directional connections between each-other which can be used by applications to route data.  It could be used by any arbitrary application that needs to get information from one device to another and can also achieve this in a way that doesn’t involve directly handling the data itself.  &lt;/p&gt;

&lt;p&gt;Since devices can be highly mobile, moving from wifi networks to 3G and back, Signpost maintains two useful pieces of information for each device.  The first is a universal &lt;em&gt;name&lt;/em&gt; for each device, which acts as a pointer.  The second is a list of &lt;em&gt;tactics&lt;/em&gt;, which can be enacted to create connections between two trusted devices. In some sense this is similar to the way DNS works, resolving device names into methods for connecting to those devices.  Initially, a personal, centralised Signpost can act to co-ordinate these connections but an individual could have multiple Signposts.  For example one could run on your network at home to enable connectivity between home devices in the absence of the external internet.&lt;/p&gt;

&lt;p&gt;In this way, the critical problem that Signpost solves is the ability to traverse the messy and chaotic structure of the internet to provide &lt;em&gt;end-to-end&lt;/em&gt; connectivity.  More importantly, it can be done in an automated way that doesn’t require the end users of devices to behave differently and can enable new services to grow that don’t need to create web-services solely to co-ordinate devices.&lt;/p&gt;

&lt;p&gt;Work is still progressing towards an alpha version and early results are very promising.  &lt;/p&gt;

&lt;p&gt;* &lt;small&gt;For example, Google has recently merged its privacy policies to allow all their services to share data between them.&lt;/small&gt;&lt;/p&gt;
</description>
                <link>http://nymote.org/blog/2012/connected-devices-and-signpost</link>
                <guid>http://nymote.org/blog/2012/connected-devices-and-signpost</guid>
                <pubDate>2012-02-08T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Towards Statistical Queries over Distributed Data</title>
                <description>&lt;p&gt;One of the issues with the distributed nature of personal data is the ability to perform statistical queries over it.  This is true of both aggregated data stores and those that only catalog data, which remains in its original location.  In both cases, a client that wishes to run a query still has to request access to a number of stores and aggregate the results in an efficient manner.  This last piece is exactly the scenario for which &lt;a href=&quot;http://perscon.net/overview/dataware.html&quot;&gt;Dataware&lt;/a&gt; is being designed.  &lt;/p&gt;

&lt;p&gt;A new project is taking shape, which will use personal containers and the principles of Dataware to build an employee incentive scheme to optimise energy usage. It’s taking place at Cambridge University in two phases.  The first phase is to gather fine-grained data from employees regarding travel habits and energy usage.  The second phase aims to use this information to construct incentive schemes to help optimise the energy usage of employees and monitor the changes.  &lt;/p&gt;

&lt;p&gt;Energy use in buildings and in transport systems is rapidly becoming part of our lifelong contextual footprint so the study needs to be completed without participants sacrificing their privacy.  Therefore, the project will enable a user to collect their private information into a personal container which &lt;em&gt;they own&lt;/em&gt;.  Then the project team can request the ability to run queries over subsets of the data contained in those stores.  This arrangement facilitates the following:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allows the research team to calculate energy use accurately&lt;/li&gt;
  &lt;li&gt;Assures users that the data is only used for this application&lt;/li&gt;
  &lt;li&gt;Denies the team access to other data that is not relevant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type of sensitive data relevant to the study will be daily commutes (e.g. GPS information between 8am-10am and 4pm-6pm on weekdays only).  This information could be combined with public data (e.g. traffic data) and a series of incentives constructed to optimise the overall energy usage.  A particularly exciting possibility would be the ability to test various types of incentives with different groups to see which are most effective.  All while preserving the individual privacy of users.&lt;/p&gt;

&lt;p&gt;We’ll post more information as the project develops, including the hurdles and technical challenges that need to be overcome.  In the meantime, you can read more about the project itself at the &lt;a href=&quot;http://www.cl.cam.ac.uk/research/srg/netos/c-aware/&quot;&gt;C-AWARE site&lt;/a&gt;.&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2012/queries-over-distributed-data</link>
                <guid>http://nymote.org/blog/2012/queries-over-distributed-data</guid>
                <pubDate>2012-01-26T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Privacy needs to be built in</title>
                <description>&lt;p&gt;Today, news broke about how O2, a Mobile Network Operator, reveals customers’ mobile numbers when they browse from their phones.  A site put together &lt;a href=&quot;http://lew.io/headers.php&quot;&gt;by Lewis Peckover&lt;/a&gt; simply displays the headers sent to his servers when people visit the page.  If you visit from an O2 phone, then you &lt;strike&gt;can&lt;/strike&gt; could easily see your phone number displayed.   In other words, the phone number is simply given to the requesting server as plain text in the http headers (specifically &lt;em&gt;x-up-calling-line-id&lt;/em&gt;).  There was nothing particularly special about Lewis’ site so it’s reasonable to assume that any site people have browsed using their 3G connection could have kept a copy of the user’s number.&lt;/p&gt;

&lt;p&gt;This is obviously a massive breach of privacy and as you can imagine, news of it spread fairly quickly via twitter.  A few customers even posted templates to help others file complaints with the UK’s Data Protection office (who have &lt;a href=&quot;http://www.zdnet.co.uk/news/regulation/2012/01/25/privacy-watchdog-to-probe-o2-over-phone-number-leaks-40094902/&quot;&gt;now contacted O2&lt;/a&gt; to “remind them of their data breach notification obligations”).  One of the main objections was that advertisers who can track visitors now also have access to phone numbers which can be used to tie different visits together.&lt;/p&gt;

&lt;p&gt;In fact, this isn’t the first time that mobile browsing has been shown to leak data.  A prior &lt;a href=&quot;http://www.mulliner.org/collin/academic/publications/mobile_web_privacy_icin10_mulliner.pdf&quot;&gt;study by Collin Mulliner&lt;/a&gt; in 2010 showed that the phone number could appear in any number of headers as well as other information (e.g your roaming status).  &lt;/p&gt;

&lt;p&gt;This highlights how ‘spread-out’ personal data has become and breaches like this serve to remind us how lax some organisations can be.  As more and more people access the web via mobile devices, issues like this become more important.  Products and services should be designed to be privacy-preserving from the very beginning.  To some extent this can mitigate any mistakes that others can make but can also empower users by giving them the option to explicitly share information if they deem it sensitive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(O2 has now written &lt;a href=&quot;http://blog.o2.co.uk/home/2012/01/o2-mobile-numbers-and-web-browsing.html&quot;&gt;a post about what happened&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</description>
                <link>http://nymote.org/blog/2012/o2-privacy-leak</link>
                <guid>http://nymote.org/blog/2012/o2-privacy-leak</guid>
                <pubDate>2012-01-25T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Growing awareness of Personal Data</title>
                <description>&lt;p&gt;Awareness of Personal Data issues have risen in prominence in recent years and there have even been a number of new companies springing up around the idea of personal data stores.  At the moment, only a handful of these are public and it’s likely that more of them are working away behind the scenes. &lt;/p&gt;

&lt;p&gt;Although we won’t necessarily be discussing these sites in any detail it’s interesting that what they all have in common is the aim of aggregating a user’s data in one place.  Once a user has collected all her data, the suggestion is that she can share those ‘data-streams’ with others, including services that she’s granted access to.  At the moment there’s limited information on how this aspect would work in practice but it’s certainly important in order to liberate the &lt;em&gt;value&lt;/em&gt; of that data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/harmony19490/362527788/&quot;&gt;&lt;img style=&quot;float:right&quot; src=&quot;/images/open-padlock.png&quot; /&gt;&lt;/a&gt;
In general, this approach seems similar to the previous iteration of Personal Containers.  The idea of aggregating data into one place is fairly intuitive but as we’ve &lt;a href=&quot;http://perscon.net/blog/2011/08/31/refresh.html&quot;&gt;learned from prior feedback&lt;/a&gt;, there is valid concern about having “all your eggs in one basket”.  &lt;/p&gt;

&lt;p&gt;There have been security issues that highlight this problem.  Last year a &lt;a href=&quot;http://www.wired.com/threatlevel/2011/06/dropbox&quot;&gt;programming error at Dropbox&lt;/a&gt;, a popular file-syncing service, led to customer accounts being accessible.  For a few hours you could access any user account with any arbitrary password.  The flaw was possible because of the way Dropbox handles encryption, specifically that they hold users’ encryption keys and therefore have access to files.* &lt;/p&gt;

&lt;p&gt;The situation above is a clear example that there should be more separation of privileges among our data.  Our response to feedback was the concept of &lt;a href=&quot;http://perscon.net/overview/dataware.html&quot;&gt;Dataware&lt;/a&gt;.  The premise is to leave the data themselves in the most appropriate place but facilitate access to them.  We achieve this by creating shims that can interface with services and at the moment the team has put together a couple that interface with social networking sites and another for &lt;a href=&quot;http://perscon.net/blog/2011/09/01/aethers-notebook.html&quot;&gt;Aether’s Notebook&lt;/a&gt;.  These look very promising and we hope to continue developing these and others, along with the ability to run authorised computations on the data.&lt;/p&gt;

&lt;p&gt;There’ll be more to follow in the coming weeks on different aspects of Personal Containers, covering both &lt;a href=&quot;http://perscon.net/overview/dataware.html&quot;&gt;Dataware&lt;/a&gt; and &lt;a href=&quot;http://perscon.net/overview/signpost.html&quot;&gt;Signpost&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Although this might sound odd, many services do this.  If a user forgets their password, the files can still be recovered.  In this case there was some confusion about how security was presented to users.  In order to have a fully secure system, users would need to accept that if they lost their passwords, the service wouldn’t be able to help.&lt;/em&gt;&lt;/p&gt;
</description>
                <link>http://nymote.org/blog/2012/growing-awareness-of-personal-data</link>
                <guid>http://nymote.org/blog/2012/growing-awareness-of-personal-data</guid>
                <pubDate>2012-01-20T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Yurts for Digital Nomads</title>
                <description>&lt;!--- OLD Excerpt: excerpt: The App Engine data collector for Personal Containers is coming on nicely, and working with AppEngine has been interesting; it's got excellent availability and you can't beat the price (free), but coding robust Python that doesn't trip over the tight resource limits for individual requests and asynchronous tasks and queries is tricky.  While it is good for small records such as my iPhone or FindMyiPhone GPS traces traces, it doesn't work so well with my gigabytes of photographs or decades of e-mail. --&gt;

&lt;p&gt;The App Engine data collector for Personal Containers is coming on nicely, and is on track for an alpha preview release &lt;a href=&quot;http://github.com/avsm/perscon/blob/master/README.md&quot;&gt;fairly soon&lt;/a&gt;. Working with AppEngine has been interesting; it’s got excellent availability and you can’t beat the price (free), but coding robust Python that doesn’t trip over the tight resource limits for individual requests, asynchronous tasks and queries is tricky.  While it is good for small records such as my &lt;a href=&quot;http://github.com/avsm/perscon/tree/master/plugins/iPhone/&quot;&gt;iPhone&lt;/a&gt; or Find My iPhone &lt;a href=&quot;http://github.com/avsm/perscon/blob/master/appengine/perscon/drivers/fmi.py&quot;&gt;GPS traces&lt;/a&gt; traces, it doesn’t work so well with my gigabytes of photographs or decades of e-mail.&lt;/p&gt;

&lt;p&gt;This confirmed our earlier intuition that there is no one perfect solution for personal data handling; instead, we need to &lt;em&gt;embrace diversity&lt;/em&gt; and construct an infrastructure that can cope with change over the coming decades. Mobile programming has changed beyond recognition in just a few years, and cloud providers are specialising in different ways (e.g. &lt;a href=&quot;http://www.picloud.com/&quot;&gt;PiCloud&lt;/a&gt; for simple compute, or &lt;a href=&quot;http://aws.amazon.com&quot;&gt;EC2&lt;/a&gt; for fancy services like elastic &lt;a href=&quot;http://aws.amazon.com/elasticloadbalancing/&quot;&gt;load balancing&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/nomads-diagram.png&quot;&gt;&lt;img style=&quot;float:right&quot; src=&quot;/images/nomads-diagram-300.png&quot; /&gt;&lt;/a&gt;
So to recognise this, we are building components that all interoperate with your personal data, keep it secure, and ensure it persists for more than a few years.  &lt;a href=&quot;http://www.malteschwarzkopf.de/&quot;&gt;Malte Schwarzkopf&lt;/a&gt; came up with the term “digital &lt;a href=&quot;http://en.wikipedia.org/wiki/Yurt&quot;&gt;yurts&lt;/a&gt;”, and it’s stuck.  We’ve written a &lt;a href=&quot;/papers/digital-yurts-draft1.pdf&quot;&gt;draft paper&lt;/a&gt; about it, and would love to hear your comments and feedback on the approach.&lt;/p&gt;

&lt;p&gt;There are some interesting recent trends that make doing this particularly important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The New York Times wrote about the &lt;a href=&quot;http://www.nytimes.com/2010/05/02/magazine/02self-measurement-t.html&quot;&gt;data-driven life&lt;/a&gt; increasingly influencing our decision making. Current sensor data such as GPS traces are just harbringers for the privacy disaster that would be information such as heart rates or your consumption habits getting into the public domain. &lt;em&gt;(link via &lt;a href=&quot;http://www.cl.cam.ac.uk/~dgm36/&quot;&gt;Derek Murray&lt;/a&gt;)&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Facebook has announced a brand new API platform to get access to your information. The &lt;a href=&quot;http://eff.org&quot;&gt;EFF&lt;/a&gt; has a fantastic timeline of &lt;a href=&quot;http://www.eff.org/deeplinks/2010/04/facebook-timeline&quot;&gt;Facebook’s Eroding Privacy&lt;/a&gt; over the last five years, to demonstrate how unsafe it is to trust your data to any third-party.  We’ve started developing an information dump plugin for Facebook, but the API just changed mid-way and so it has to be started again (volunteers welcome!).&lt;/li&gt;
  &lt;li&gt;In the UK, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_Economy_Act_2010&quot;&gt;Digital Economy Act&lt;/a&gt; is an extremely controversial act that makes anonymity and privacy all the more important.  We’re assembling an open-source &lt;a href=&quot;http://www.scribd.com/doc/28393106/Using-Dust-Clouds-to-Enhance-Anonymous-Communication&quot;&gt;dust cloud&lt;/a&gt; that integrates Tor into personal containers to automatically grant you anonymity as you communicate with your friends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re interested, join our &lt;a href=&quot;/contact.html&quot;&gt;group&lt;/a&gt; or contact &lt;a href=&quot;http://anil.recoil.org&quot;&gt;me&lt;/a&gt; directly.  At this stage, you need desire and the ability to hack code, but things are settling down over the next few months…&lt;/p&gt;
</description>
                <link>http://nymote.org/blog/2010/yurts-for-digital-nomads</link>
                <guid>http://nymote.org/blog/2010/yurts-for-digital-nomads</guid>
                <pubDate>2010-04-29T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Pulling together a user interface</title>
                <description>&lt;!--- OLD Excerpt: excerpt: Personal containers gather data from a wide variety of sources, and normalise them into a format which understands people (address book entries, with a set of services such as e-mail, phone, IM and online IDs), places (GPS, WOEID), media (photos, movies) and messages (Tweets, emails, Facebook messages). --&gt;

&lt;p&gt;We’ve been &lt;a href=&quot;http://github.com/avsm/perscon&quot;&gt;hacking&lt;/a&gt; away on fleshing out the &lt;a href=&quot;http://code.google.com/appengine&quot;&gt;App Engine&lt;/a&gt; node for personal containers.  We’re building this node first because, crucially, deploying an App Engine VM is free to anyone with a Google account.
&lt;a href=&quot;/images/perscon-extjs.png&quot;&gt;&lt;img style=&quot;float:right&quot; src=&quot;/images/perscon-extjs-thumb.png&quot; /&gt;&lt;/a&gt;
The service itself is limited since you can only respond to HTTP or XMPP requests and do HTTP fetches, and so its primary use is as an always-on data collection service with a webmail-style UI written using &lt;a href=&quot;http://www.extjs.com/&quot;&gt;extjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personal containers gather data from a wide variety of sources, and normalise them into a format which understands people (address book entries, with a set of services such as e-mail, phone, IM and online IDs), places (GPS, WOEID), media (photos, movies) and messages (Tweets, emails, Facebook messages). I’ll post more about the data model behind personal containers in a follow-up as the format settles.&lt;/p&gt;

&lt;p&gt;The App Engine node has a number of plugins to gather data and aggregate them into a single view (see screenshot). Plugins include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/avsm/perscon/tree/master/plugins/iPhoto/&quot;&gt;iPhoto&lt;/a&gt; &lt;img src=&quot;/images/iphoto_30x30.png&quot; width=&quot;15&quot; /&gt; extracts location (via EXIF), people present (associated via &lt;a href=&quot;http://gizmodo.com/5141741/what-to-know-about-iphoto-09-face-detection-and-recognition&quot;&gt;faces&lt;/a&gt;), and of course, the actual photograph.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/avsm/perscon/tree/master/plugins/Adium/&quot;&gt;Adium&lt;/a&gt; &lt;img src=&quot;/images/chat_30x30.png&quot; width=&quot;15&quot; /&gt; logs all IMs into a threaded chat view.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/avsm/perscon/tree/master/plugins/iPhone/&quot;&gt;iPhone&lt;/a&gt; &lt;img src=&quot;/images/phone_30x30.png&quot; width=&quot;15&quot; /&gt; uses the backup files on a Mac to extract SMS messages, phone call records (and it could also get photographs and browsing history, although it currently doesn’t).  An AppEngine tracker can also use &lt;a href=&quot;http://www.apple.com/mobileme/features/find-my-iphone.html&quot;&gt;FindMyIPhone&lt;/a&gt; to poll your iPhone regularly to keep track of your location without publishing it to Google or Yahoo (and hopefully in iPhone 4.0, we can operate as a background service at last!).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/avsm/perscon/tree/master/appengine/twitter.py&quot;&gt;Twitter&lt;/a&gt; &lt;img src=&quot;/images/twitter_30x30.png&quot; width=&quot;15&quot; /&gt; runs directly on AppEngine (authenticated via OAuth) and synchronizes with a Twitter feed.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/avsm/perscon/tree/master/plugins/MacOS-SyncServices/&quot;&gt;SyncServices&lt;/a&gt; hooks into the MacOS X &lt;a href=&quot;http://developer.apple.com/macosx/syncservices.html&quot;&gt;sync framework&lt;/a&gt; and initially subscribes to Address Book updates. This seems to be the first open-source sync alternative to the expensive Mobile Me, as far as I can tell.  I’m planning to expand this to also subscribe to the full set of sync information (e.g. calendars).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m switching tacks briefly; we received an &lt;a href=&quot;http://aws.amazon.com/education/aws-in-education-research-grants/&quot;&gt;Amazon Research Grant&lt;/a&gt; recently and I’m building a node that runs as a Linux server to act as a longer-term archival and search server.  This is being written in OCaml and uses &lt;a href=&quot;http://1978th.net/tokyocabinet/&quot;&gt;Tokyo Cabinet&lt;/a&gt; (with Jake Donham’s excellent &lt;a href=&quot;http://github.com/jaked/otoky&quot;&gt;bindings&lt;/a&gt;) and so should be speedy and a useful alternative implementation of the HTTP REST interface.  The plan is to automatically synchronize meta-data across all the nodes of a personal container, but store large and historical data away from expensive cloud storage such as App Engine. &lt;/p&gt;

&lt;p&gt;There are lots more plugins in development, such as &lt;a href=&quot;http://foursquare.com&quot;&gt;Foursquare&lt;/a&gt; and &lt;a href=&quot;http://gowalla.com&quot;&gt;Gowalla&lt;/a&gt; OAuth collectors, an &lt;a href=&quot;http://github.com/avsm/perscon/tree/master/android&quot;&gt;Android&lt;/a&gt; mobile application to upload location and contacts information, and Google GData synchronization.  If you’re interested in one of these or something else, please do &lt;a href=&quot;/contact.html&quot;&gt;get in touch&lt;/a&gt; or just fork the &lt;a href=&quot;http://github.com/avsm/perscon&quot;&gt;project&lt;/a&gt; and start hacking!&lt;/p&gt;
</description>
                <link>http://nymote.org/blog/2010/uiprototype</link>
                <guid>http://nymote.org/blog/2010/uiprototype</guid>
                <pubDate>2010-04-15T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Opening a website</title>
                <description>&lt;p&gt;We’ve been working away at building a new type of database to help
individuals keep reigns on their ever-increasing personal digital
information.  The first prototypes run freely on &lt;a href=&quot;http://code.google.com/appengine&quot;&gt;Google App Engine&lt;/a&gt; to
gather your data behind-the-scenes, and we are working on more
advanced versions that run on embedded devices and the cloud.&lt;/p&gt;

&lt;p&gt;If you’re interested in keeping track of your personal data, you can
start off with the &lt;a href=&quot;/install.html&quot;&gt;installation&lt;/a&gt;
instructions to clone your own version.  After that, read up on the &lt;a href=&quot;/design.html&quot;&gt;design&lt;/a&gt; of the system (which is still changing
as we research new ideas around it).  When you find something you want
to fix, or add a new plugin data source, just clone the &lt;a href=&quot;http://github.com/avsm/perscon&quot;&gt;code&lt;/a&gt; and send us back fixes!&lt;/p&gt;
</description>
                <link>http://nymote.org/blog/2010/intro</link>
                <guid>http://nymote.org/blog/2010/intro</guid>
                <pubDate>2010-03-29T00:00:00+01:00</pubDate>
        </item>


</channel>
</rss>
